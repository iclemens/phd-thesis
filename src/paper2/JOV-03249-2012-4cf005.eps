%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: JOV-03249-2012-4cf005.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: post_000
%%CreationDate: 8/31/2012
%%BoundingBox: 0 0 540 233
%%HiResBoundingBox: 0 0 540 232.0625
%%CropBox: 0 0 540 232.0625
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 56 8%%BeginData: 5888 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD83FFA8A8FD28FFA87DFD29FF7D7DFD29FF2752FD28FF5227FD28
%FFA87DFD29FFA85252FD28FF7D27FD29FF52A8FD2AFFA8F87DFD2AFFA8FD
%27FFA8FD2AFFA87D7DFFFFFFA8FD11FFA9FD14FFA8A8FD0BFFA8FD1DFFA8
%FD19FFA8FD10FFA8A87D7DFFFF7DA87DFD0BFFA8FD15FFA8FF527DA8FF7D
%A852A8FFFFA8FD1FFF7D7D7DFFA8A87DA8FD10FFA8FD10FFA8FF5252FF7D
%277D7D27A8FD0AFFCBA8FD15FFA827A8A87D5227277DFFFFFFA9FD1DFFA8
%5252FF527D275252FD11FFCBFD10FFA8FFFFFF7DA87DA87DFD0BFFA8FD15
%FFA8FFFFFF7DA87DA87DFFFFFFA9FD21FFFD04A852FD11FFA9FD13FF5252
%A852522752FD0BFF7EA8FD17FFF87DA8525227A8FFFF7EA8FD1DFFA8FF27
%A87D5227277DFD10FFA2A2FD10FFA8FFA8FD11FFA2FD15FFA8FFFFA8FD08
%FF7EFD20FFA8FFFFA8FD13FFA2CBFD0FFFA8FD2AFFA8A8FD0BFFA8FD1DFF
%A8FD18FFCBA8FD10FFA8FD13FFA9FD15FFA8FD0BFFA8FD37FFA8FD10FFA8
%FD14FFA9A8FD15FFA8FD0AFFA8A8FD1DFFA8FD18FFA8A8FD10FFA8FD29FF
%A8FD52FF7D2752FD2AFFA8A8FD29FFA8FD28FF7DA8A8FD29FFA8FD55FFA8
%FD54FFA8FD2AFFA8FD29FFA8FD54FFA8FD2AFFA8A8FD29FFA8FD2AFFA8FD
%29FFA8FD54FFA8FD1DFFA8FD0DFFA8FD13FFA8FD15FFA8FD17FFA8A9FD0B
%FF7D7DA8FFFFFFA8FD1BFFA9AFFD0CFFA8FD14FFAFFD2EFFA9FD07FFA87D
%FFA87D7DA8FFFFA8A8FD1CFFA8FD0DFFA8FD13FFA8FD15FFA8FD17FFA8AF
%FD06FF5252A8FFFF7D52A8FFFFFFA8FD29FFA8FD43FFA9FD04FFA852A8FD
%04FF7D52FFFFFFA8FD1DFFA8FD21FFA8FD15FFA8FD17FFA9FD04FF7D52A8
%FD05FFA87DFFFFF87DFD1CFFA885FFFFFF7D52FD07FFA8FD13FFA885FD2D
%FFA97EFFA8527DFD07FF7DF8FFA87D7DFD1CFFAFA8FF7D527DFD08FFA8A8
%FD12FFAF7EFD15FFA8FD17FFA9A87652A8FD08FF7D27A8FFFFFFA8FD1CFF
%A8527DFD0AFFA8FD42FFA952A7FD0AFFA827FFFFFFA8FD09FFCBA8A8FD0F
%FFA87D53A8FD0CFFA8FD04FFA9A8FD0DFFA8FD15FFA8FD0BFFA8A8FD09FF
%7D52A8FD0BFF5227A8FFFFFFA8FD09FFA9FD0FFF7D7684FD0DFFA8FD05FF
%A8FD31FFA9FD07FFA8527DFFAFFD0AFFA85227FFFFFFA8A8FD08FFA8A9FD
%0DFF7D52A8FFFF84FD0DFFA8FD04FFA8A8FD0DFF84FD15FFA8FD0BFFA8A9
%FD06FF527DA8FFA8A9FD11FFA8FD09FFA2FD07FFCAFFFFFF7D527DFD11FF
%A8FD05FFA2FD0DFFCACAFD1DFFCACAFFFFFFA8FD04FFA852A8FD21FFA8A8
%FD04FFA8FFFF832D7DA8FD18FFA9A8FD0CFFCBA1FFA8AEFD12FFA8FD07FF
%7DCFFFFFA8FD04FF7D52FD06FFA9A8FD10FFA8FD09FFA8FFA9FD05FFA87D
%58FD15FFA8FD05FFA9FD0DFFCBCBFFFFA8FD1AFFCFFD04FFA8FFA8527DFD
%07FFA8FD10FFA8FD09FFA8A27DA2FD04FF76527DCACAFD14FFA87DFD06A8
%FFA1FFAFFD05FFCACAFFA97DFFCFAEFD12FFA8FFFFFFA1FFFFFFA1CAFFFF
%A8A85252A8FD08FFA27EFD10FFA8FD09FFCAFFA8FFA87D52A1FFFFA8FD15
%FFA8FD097D59FD067DA8A1A8A8A8FFFFA8FD1AFFCACAFFFF8452A8FD0AFF
%A8FD0EFFA82752FD0AFFCAA9CB7D5353FFCACAFF83A8FD14FFA8FD08FFA8
%A884CBA8A87DA87DA17D764B7D5858527D527D52FD047DA8A8FD07FFA8FF
%FFFFCAFFFFFF82AEFF7D2EA8FD0BFFA8A8FD0EFF7DA8A8FD09FFA7A8527D
%84FFFFC3CAFF76CAFD14FFA8FD09FFA8AFAEFD05FFA1FFCAA1FFFFA7FFA8
%FFA8CFA8A87DA87DFD0BFFAEA8FFFFFFA076597DAFFD1EFFA8FD04FFA8FF
%FFFFA8A152A8FFAFA9FFA8FFFFA1A8FFA8FD13FFA8FD07FFA1A9A8AEFFAF
%A8FFA8A1FFFFA7FFA8FD13FFA8FFFFFFA0FFFFFF6F7DA8FF7EAFFD0AFFAF
%FD12FFA8FD05FFA8FF7D7DA1FFFFFFA9FD05FF7EAFFFAEAEFD11FFA8FD08
%FFCA7EA8AEFFA9AFFFFFCAFFAEA8FFFFAEFD04FF84A9FD10FFCAFFA8527D
%FFFFFFA97EFD0AFFA97EFD16FFA87D5284FFA8FD06FFA8FFFF597EFF83AE
%FD1AFFCAA87EAEFFAF84FFCACAFFAE83FFA8AEFD04FF5AAFFD0CFFA8FFFF
%FF837D52FF83AEFFFF7EA9FD0AFF7E84FD11FFA8FFFFFFA8527DFFFFCA83
%CFAEFD07FFA8CFFD14FFA8FD09FFA7A8A8FFFFAFFFFFCAFFCFCFFFFFA8FD
%15FFA77C7DFFFFA7A8FFFFAFA9FD1CFFA8FFFFA8527DA8FFFFCAA1A283AE
%FD04FFA1CAFD04FFA8FD12FFA8A8FD07FFA8A1A1FFFFFF84FD04FFCA7DFD
%15FFA8FF52769AFFFFFFA1A8FFFF84AFFD1DFFA87D52A8FD04FFCACAA1AE
%AEFD1DFFA8FD09FFA7A8A8FD1EFFA852A8CFA1A8FD24FFA87D7DFD29FFA8
%FD29FF52FD2AFFA8FD29FFA8FD54FFA8FD55FFA8FD28FFA852A8FD29FFA8
%FD54FF7DA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8A8A8FD06FFA8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FD07FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FD07FF
%A852FD10FF52FD10FF527DFD06FF27FD10FF7D7DFD0FFF7D527DFD05FF7D
%7DFD07FF7DA8FD07FF52FD07FF7D7DFD07FF7DA8FD06FFA8A8FD10FF7DFD
%0FFFA8A87DFD06FF7DA8FD0FFF7DA8FD10FF7DA8FD05FFA87DFD07FFA8FD
%07FFA8A8FD07FFA87DFD07FF7DA8FD0FFF7DFFFFFFA8FD07FFA8FF7D7DA8
%FF7DFD1AFF7DA8FFA8FD06FFA87DFF7DFD1FFF7DFFFFFF7D7DFF7DA8FD1C
%FFA8522752F827FD0452275227275252277D7D52A8FD19FF2727F827F827
%F852522752277D527DFD1DFFA82752A8A82727A8277DFD1DFFA8FD047DA8
%A8A8527D7DA87DA8A8FFA8A8A8FD1AFFA8FD077DA87DA87DA8A8A8FD1EFF
%7DA8A8FF7DFFA8A87DFD2EFFA8FD27FFA8FD27FFA8FD0EFFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:ModifyDate>2012-08-31T10:34:35+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2012-08-31T10:34:35+02:00</xmp:CreateDate>
         <xmp:MetadataDate>2012-08-31T10:34:35+02:00</xmp:MetadataDate>
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>112</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAcAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9F+e/Mc3lzyjqWsW8X1i&#xA;9gjCafb8Hl9W8ndYLWP04v3jB55EWifEa7b4q35E8yP5l8oaXrU0X1e7uoQL624uno3cRMV1Dxk+&#xA;NfTnR0o2+2+Kp7irsVdirsVdirsVdirsVdirzvUfzG1a0/OnTvI4itjpV7ZRzs5H+leq6XkhZf31&#xA;fTUWSqaQFRy+KRSUV1XomKuxV2KuxV2KuxV2KuxV2KuJIBIFSOw6n78VYh+Wfm2680aJ+krvUNOu&#xA;LmVYpJ9LsFZZtNkkTm1neFp5i00ZPFqxxbg/AMVZfirsVdirsVdirsVdirsVdirsVYJa/ldoGi+c&#xA;r/zrZ3V8dW1WT07mF5h9WC3U9r6nCNVXj/vKo+1vU8q/DxVRdj+Y9rfXmrmHT549G8vXF9aa7qs7&#xA;RqIZbCOKWscCGSWaORZWowAI4HbpiqTX/wCfnky0sb7UFtr+6sbGvOeGOGjA2zXSFVkmR15xxtxW&#xA;RVboSArIzKvSQagHx3xV2KofUbiW2sLi4iVWeGNpArVAPEVI29hhiLKhWj9TgvqU50+Lj0r7VwKu&#xA;xV2KuxV2KsX86ec7Hydp2o6/qEF3d2dnFaBrayUSykzTvFySN3jTuCxr0GKoLVfzS0vQtK1C58wW&#xA;k1pqOnWc2qTaTbUu5WsI7k28U6SIFh/e/C3EuCoPxdCcVa8qfm55Z80ea9Q8taZFc/W9OWZ5LlxD&#xA;6DrBKsJKGOV5KMz/AA8kHvQ7YqyyK4uG1Ge3ZU9KOOORGFeR9QuKHtt6eSI2Sisih2KuxV2KuxV2&#xA;KuxVhP8Aj94dfsPKVlpV1qOsPp9pqM1w7xRWwtZZ0t5n9aRy7yxBjKY+FWUbGuKoPWPz18gaZBBc&#xA;vLc3FndWUuoW11FAwSSOG8jsWjX1TE3qerLWlKBQWJApVVmehazBrOmrfwwywK0k0LQzhBIr28zw&#xA;SA8GkX7cZpRjtiqPxV2KuxVCpcXLalLb8U9COOOTlvzJkLinht6eSrZKKyKHYq7FULqf+8yf8Z7f&#xA;/k+mKsf1vy35t1XXLynmA2Plqewit4dPt4gtyl39YEkt0l0vCRGEK+nGKsvJuRU8eLKpFc/lj5xl&#xA;v/rMfnu/SH69Nei3KzcRFJfC7W0/d3MYMSxr6JqteOylELRsq9HxV2Kpb5lW8by/qAs2RLkwScGk&#xA;BKj4fiqB/k1yeOuIWkc0dbC4FtELkq1wEUTMgIUvT4ioPavTInnshUwK7FXYq7FUHRzqN2IzSQ20&#xA;PAnoDympirCrL8v/AD1N5bkt9Z863L+Y7r6mZ9TsoVt4U+q3f1mQRwIyrylj/wBHZ/hDIF5J9oMq&#xA;mXkzyZ5h0HVL681PzNca3BdxrHFaTiYJCyzSyc09SecVcS0bbsOPFAqKqnNmmpDzLqTTvG1k0Ft9&#xA;URQfUUVl5cz0+1y+jLDXCO9PRNsrQ7FXYq7FXYq7FXYqxqXTvMt23lx9N1RLDSIIWbWLf0lkluQ0&#xA;SLDHG7D91xPJi6mvQUNdlWN6n+Vfm26Hp2nnzUbCJRaqpjErSMLaYOxkZrjiWlQUdkVSzMxbknGN&#xA;VWeaJY3Vho1hY3d0b26tLeKCe8YOGmeNArSn1HmerkV+J2PiT1xVG4q7FXYqlMKal/im5cvH+jvq&#xA;UI9Oh9X1fVkoa9ONOX4ZYa4fO09E2ytDsVdirFp/PnlG812byzbalHJrlnLFJc2YVxwWK4tw9XKi&#xA;OoNxGKBq7+zUVZTirsVdirsVUL+2e5sp7ZHEbTIY+ZXkAGFDsCvb3wxNG1CtGJAiiQhnp8TKOIJ9&#xA;gS1PvwK3irsVdirsVQcTp+mLlOQ5i3gJWu9C8wrTFUZirsVQ0dtMt/NctIrRyxpGsYQgj0yxBLcj&#xA;X7Z7Yb2pUTgV2KuxV2KuxV2KuxVCaOytpFiykMrW8RVhuCCg3GKovFXYq7FXYq7FUMttOuoSXPqr&#xA;6UkaRmLgeQ9MsQefKnVz+zhvalROBXYq7FUmu9A0K2uX1S2061h1O4nhE99HDGk8gknh585QoduX&#xA;ox1qd+K+AxVOcVdirsVdirsVdirsVdirsVdiqFj/AOOrcf8AGCD/AInNiqKxV2KuxV2KuxV2KuxV&#xA;2KuxV2KoXSf+OVZf8YIv+IDFUVirsVdirsVdirsVdirsVY+/m6X/ABFPo0Og6pMlq8CXGq+lDFZD&#xA;6wAVZJJ5oXmCV+P0UfiduuKptqf+8yf8Z7f/AJPpiqKxV2KuxV2KuxV2KtSByjCMhXp8LMOQB9wC&#xA;tfvxCqGnTTT6fbTzFTLLGsj8AVWrCuwJY9/HJTABIDGJsIjIsnYqhY/+Orcf8YIP+JzYqisVdirs&#xA;VdiqFkmuRqcEKsn1d4pHdSpL8kKAUbkAB+8/l7ZMAcNsSTaKyDJ2KuxV2KuxVC6T/wAcqy/4wRf8&#xA;QGKorFXYq7FXYq7FULZS3TzXaTsjCGUJHwQpsY1f4qs9ft5OQG1MYk7orIMmP6d510zVddk0rR4p&#xA;dRitS66jqsAU2VvKg/uDMSBJLXYpFy4ft8e6rBvNMXlR/wA//LEWoS89amsi9hayWfrLS3F1JVJz&#xA;MFjPL95X0GKmMUdORBVZEfOmt3nnG98uv5ZvbbSrOSNofMEoK287xzWZCxhkVfiNzJQ8zX0zSu/F&#xA;Vm+KuxV2KuxV2KuxVZcStFBJKsbTNGjMsSU5OVFeK1IFT0FThAsoJ2SFfNOi6L5V07UdbuF02KSC&#xA;FUjmNZXkZBxijjTk8kjfsogLHwyeUVM+9jjNxHuRHlvW9V1hbi5udHm0mwqv1A3jqt1MDXm8lsob&#xA;0F+zxDvzO/JUpvWzTnFUHEx/TFyvE0+rwHltT7c23WuKozFXYq7FXYqllxdSr5ksrYW0jRPa3DG6&#xA;HH01IeL4TU8u3h3HvS0R9BN9R+lrJ9QFdEzypsdirsVdirsVQmjknSLEkFSbeIlTSo+AbGlRiqLx&#xA;V2KuxV2KuxVit1500nRRqdxqyyWrNfG3sbUL6tzeSLBEAtrBHyklLdQAOm5pvS3JGhHfp+ktcDZP&#xA;vQS6L5o83n1fMhfRPLzbx+XLaSlzcIf+rhcxHZT3ghanZncbZU2MxsrKzsbSGzsoI7a0t1EcFvCo&#xA;SNEXYKqqAAB7Yq8U1/UbfVf+ckdH08Wd76NgsUFzeQ3Rit1uYbS6vYTNFBLzqUl4RGTgGUzpwkVi&#xA;VVez6n/vMn/Ge3/5PpiqKxV2KoK1klbUrxGnZ0i4cYSEovMV7KG+85I8glG5FDsVUb2+srC0lvL6&#xA;4jtbSBec1xO6xxoo/aZ2IVR88VYdJ5w8weYUYeULVLXSqfvPNOqo6W3Hu1pakxzXFP53McfcM42x&#xA;AVF+TvJehWUdtrbs+qa1LAoOrXjiaVFZRWKD9iCMdOESr/lVO+TyD1H3sYfSGWZBk7FULH/x1bj/&#xA;AIwQf8TmxVrV5ZIdLupo5TDJFE8iyDid1BIHxhhvkojdIRSAhFBYsQB8RpU++1BkUN4q7FUDNPAN&#xA;btYjIola3nKxkjkavEdh1/ZP3ZYAeE+8fpYE+oI7K2bsVdirsVdiqF0n/jlWX/GCL/iAxVFYq7FU&#xA;Fp0krT3yPO04hmEaBgnwj0kcj4FXu565KXRJRuRQw6886ahrE8um+R4ItQmjYx3euz1/RdqwNGUM&#xA;hDXUq/77iNAdndMVX+TvK2l2Wo3+pT3X6a8w8xDca3cemZ+DRo5jjVAEhi5EgIgHTepFcsmCAPd+&#xA;lhE2Sy7K2bsVdiqF1P8A3mT/AIz2/wDyfTFUVirsVYnqGraVYapfuLtrK5nuLOGWUoQrkkR8Q0qN&#xA;HshJ+Hwrl0QZCudW2cJq2VerFzKc15qKstRUDxIyqmu3n0vn7/Rry08tQzarcQTTfW9WlmK6baqJ&#xA;Wpzu5vUWRgnGkUIY+PGtcqkaiS2ZgZGgN6HIeSZaZ5ChvprfVvNl/wD4m1COklsjqI9Nt2ps1tZq&#xA;WjJHUSSl38GHTJhrojYsxwq7FXYq7FUsfUtOt9bnguLqGGd7aF1ikkVXKiSYcgpINK4q3rhtbjQr&#xA;ok+rE8RMZQk1cbpxKf5QGThzCRzRDX1lbmCFmKiVf3J4OVoB3anFfpOQJ3SIkgnuRKsrKGUhlPQj&#xA;cYsVO5u7W1jElzMkEZIUPIwQFj0FWI3OAmmUYmXIWlF1cwDzfp0H110eW0uJBZCSiOUaMIxTuaO5&#xA;/wBj7HJiG1sgfSR5ppamUy3SvIzhJAqAhRQFFb9kDu3fKo3ZaY9URk2TsVdirsVQmlEDSbMnoLeM&#xA;7Cp+wOwxVWtbqG6hE0JYxmoBZWQ7bdHCnADbKUTE0Ut8svC9jK0d294Bc3Cl3l9YgJMyqK1NPhUZ&#xA;DFy53uUzEgfUK+FJVcea/K/l4X1xcTnnd3fGztIVea5upmiRjHbQryeRi5bZRQdTQZkTva2JKC/Q&#xA;HmXzh+981ctI8vPQx+WLaX9/MP8AtZXMR3B7wQtw7M7jbK0M0tLS1s7aK1tIY7e1gUJDBEoSNEUU&#xA;CqqgBQPAYqgY9QjPmObTjdkypax3K2dE+yzujNXjy2IX9rvk+H03Sa2TPIIdirsVYZPp/wCYS+cr&#xA;m9udUtW8mv6SWemcA1ys5ntOMjOIojx+GccebUqDVqgRqszxV2KsF8zeaGh1K40zTbC51LVpJoXt&#xA;7WCD1Y2NsUcmScyRQwKrFatI48AC22CEqkdm2X0x+Kink7V/Meryyec5I/qphRpNC0+WRbRlZ29O&#xA;O6k4xy3fHi3INxjbasZ7Wn6B7y44+oo+b67Y+Q9YjSyigjtmvIrO1sxyUWwlZQAlEC8V5bDYAV9s&#xA;xMnFwHv3c3JjEpxEDRqO576ZLaXp+qWRuldLm5jTkhjaokKcmVgAQpG/U5YJUBfNxZek0TaMyaux&#xA;V2KuxVI9Q8uaDq+szNq2mWeoBLe3Ef1q3jmZSHn6GQNtv4Yqgn/Kr8sncyf4T0iOViWaWKyt43JP&#xA;Wroitv8APFUp1r8uvJNs8MNnp/1aaaO4aGOGe6gXlHHyA/cyLxX22BxifUGfCTjkVXTfIOgCzBNz&#xA;rNg0CKZpI9b1NbcMyB24RtdtGq/FX7AphJuRA72mEtkNrnlpLLSob3Ttc1+9ie4hWJba8W72aUDk&#xA;PXWXlxPQkn4qZDJceYcrSxE5cwNj9y258qeb4fNlhBa+b9SNq1rcN69xDp8sqfGnONSLFQVY+mfi&#xA;ao49QNmePfhRHg8M3fFY93VM7fQfPgluBD5oQNHLxLXFjDN6v7tSGcRG24niQKLttkMYlcr73Fhd&#xA;m+9X/Rv5pRfY8waNcKDssukXKOR7yJqPH/kn/XLWx3/IVY++hXdP+Yy15D/p540+mvtirKITMYYz&#xA;OFWbiPVVCSoanxBSQCRXptiq/FUHpBcaPZE/G4t4q8RSp4DoCf44qo+XruO50eCdAyIedOdAdnYH&#xA;ufDIQNhtzAiRtgnlfzf5s1iyn0/QNOX12urh5Ncu6/ULdJZDJVVUrJcylnYiNOIpTk67Vr05lwm+&#xA;8rmxmBoyEthy+xO/y/8AKulWP1rVpJI9T16eWWK51hmWSQoshHBAoEcCFhX04gqn7RFTmZmFHryD&#xA;jYjt8WZZU2OxVCJZyrqkl5zjKSRJFw9M8wIyzf3nLxfpxyV7UlF5FDsVdiqF1P8A3mT/AIz2/wDy&#xA;fTFUv8x+cNB8viGO/nZ766qLLTLZGuLy4I6iG3jDSNTu1OK/tEYqw+DQvN99b6lqOrzS+W9Fnd7q&#xA;fS9PeM6nLEoqEmu0PC3oButu5P8AxYN6ynOx7mcRxEBMPKEnl3Rri6ttHtFtLK4a1W3tlKhgZUZi&#xA;z05MWZmLOzMSSanfMbjo3WxprymUJcJNi6H6WbLbWyztcLEguHHF5goDkDsW6kbZkcRqloc2P39i&#xA;2ueVdR0+xnjM08twgfn8Kk3LNuVDkfD7YMc63AB58+TdnhuAbGw9/IIpLC5hi0SF5ZFezIWYQgvG&#xA;9ImSrsU8fl1PzFeYmUgeW7imNUATsnWWNrsVdirsVQsf/HVuP+MEH/E5sVRWKsd85wwSWJaWISBI&#xA;ZzUosjKOA5FQxUVA364OPhIl3N+IEggdaa8riSLRJGSRYLf0Yvq7sEXgfRU82UfCPhKk/Ed65HHI&#xA;ykSepcaUTGUgUTZx3Vx5esVt2jmcGB6u/FQsTh+PJFarLx4dP6ZbnHqPvZ6eQA37m7mWIebNPRp2&#xA;WU2lx/o4oVNXjI/ZrvxY9f2R9OOf7wb9Cvhkji3ofJMraOdJbhpAoEsgdOLFtgirvVV/lyyINm2A&#xA;B3QOqaEb7VtM1D6wYv0czt6IWol5ilHNR9nquXwy8MSK5sZY7kD3JrlTY7FXYqxy/wDNmi+XdB06&#xA;TUJSZ7mKOOxsYVMtzcy8B+7ghQF3PjQUA3NBiVY1oXlrUPNemxfpq6aDyopdYNAtv3RufiJdr6ZD&#xA;Vk51AhTipH2+VaCnATwC2eSM4yqZuTJPIQij0R7eERJbwXM6wRQkcET1WKqqiKEKtNwAPu+yBguv&#xA;iUSxmBokn3qnk/Tra0t72SCSGQXFy7OIVVQGUlf2dqNTkopsD365nZ5Eke5qxnZkGUM3YqlWhaEd&#xA;Kl1CT6wZ/r9w1xxK8fT5f7rXc/CO2W5cvFW3INePHw35prlTY7FXYqlfmW1ubrR5La2u3sZ5ZIEj&#xA;vIlR5IiZ0+JFkV05DtyUj2xVQ8ueTtB8vmaWxhaS/uqfXdUuXae8uCO8s8lXIr0UUVf2QBiqcTQx&#xA;zRNFKvKNxRlPQg4pBINhBQeX9GgmM0VqqStSrAt+z079sr8KN2syZcySmGWIdirsVdirsVdirsVQ&#xA;sf8Ax1bj/jBB/wATmxVFYqhrzTNPvRS7t45qCgZlBYA9g3UfRgMQebKMyORdZadaWSlLZDGhp8HN&#xA;2UUAAoGJA2HbBGAHJhW9onJJdirsVdirsVdirsVYr5Q8laPp1gl5MZNS1e+tkjvdWvGD3Lxsg/dI&#xA;QFWGIdo4gq96VqcBFqyDTdLsNMtRa2MIgtwSwjBJFT16k4IQERQSSTzNorJIdirsVdirsVdirsVd&#xA;irB/PuhqutaL5ltrO/v9ShubXTRFZNGohgubpPUupOUUr8IR8TqCEYU5/ZVkVZd9Suf+W+f/AIGD&#xA;/qlirvqVz/y3z/8AAwf9UsVd9Suf+W+f/gYP+qWKu+pXP/LfP/wMH/VLFUk8mX+p675btNVu49Q0&#xA;e5uvUaXTL1EWeEiVl4uJYI27VHw0p9kkUOKp39Suf+W+f/gYP+qWKu+pXP8Ay3z/APAwf9UsVd9S&#xA;uf8Alvn/AOBg/wCqWKpDaa3rcfm99Il026lsXaRF1WQt6ISC3gmVwEt0iHqS3TxUMlT6dRX4gqrK&#xA;MVY5a3WpXfnPWLM2t5Y2lnaWPoalWM2100rXDOsQeJqPDQB6OftCoG3JVOfqVz/y3z/8DB/1SxV3&#xA;1K5/5b5/+Bg/6pYq76lc/wDLfP8A8DB/1SxVJPM9/qektpBt49Q1IX2ow2U5tkRhbRzK/K5mEcEh&#xA;9JKUNRxBIJIG+Kp39Suf+W+f/gYP+qWKu+pXP/LfP/wMH/VLFXfUrn/lvn/4GD/qliqC1r9J2Oj3&#xA;97aS3N9dWtvLNb2SCFWnkjQskQKwSEF2HHZT8jirvLGp3uoWM7XdjLYta3M1pEJzIXmjt39NZ/3k&#xA;cJ/eUrsCD1VmFDiqL1q+uNP0a+v7a1e+uLS3lnhso+XOZ40LLEvFXarkUFFJ8AemKpf5agvpvLml&#xA;zTS3dlNJaQNJZzek0sTGNSY3ZoEYsvQ8lB8QOmKpl9Suf+W+f/gYP+qWKpfon6Tu7Wd7l7qyeO7u&#xA;oUjk9Jy8cVw6RzAtAh4yoodR0ANASN8VTD6lc/8ALfP/AMDB/wBUsVSnSZ9UutX1m0mN3bW9jNEl&#xA;vduF4XAkhV2aMSW0a0QnifTZ1rXflUBVNvqVz/y3z/8AAwf9UsVSZrvVh5wTR2jvvqLae13HrCiI&#xA;2/rCYRvbOBBwWTiVdCWqRyoNjiqc/Urn/lvn/wCBg/6pYqlWr6hfaZqmhwJDfalFqN21vcSxIDDa&#xA;oLeVxNOYYq8S6qg5ECrVrtiqf4q7FXYqkfnLR9X1jRRY6Ve/o+6Nzaytc854/wBzFcJJMlbaSGX4&#xA;41ZaLIta0JpirzKfyX/zknJYRWY832KBJ5PUlEgDtb/uBCnMaeJOS8JiTz5HkKseoVTyXRfz0hsb&#xA;2f8AT1pc3QtrlLO0hSBazOkxhfnJaoAyS+jwDfCqclf1GAdlUO3lb8+5o05+bLOCZIXRpYUjJMhg&#xA;j4ni1l6fEzx/FVC1CzKV5iONVXsPy7/MGTVtKv8AV/NE/C0l06e9gtLu7X1ms7D05o3FUtnhnvPj&#xA;dBbozLuWrRVVT7yHpHm3T7i5l128u7tb+y066mju5YZVg1L03jvobcRAcIv3cTcd05MSnVsVZhir&#xA;sVdirsVdirsVeHN+XP8AzkTFBFa2fnW1S3t1adGlluJZXvfUaRDJJLDJKYRVVaMuUO/w8aIFUwsP&#xA;Kn/OS0V2kl550024t1tjyhW3hTldqPgBYWVRC7KvOnxUZuNCFxVGX3k787NQinjuPMtvFGlzptxY&#xA;JFM8cqpbwSC9jluLW1s/U9edkK1j4UG6UqjKsj8naV5xtNau7vWby6uINQh9W6t7mSB7eC7jf0UW&#xA;xSL4o4Whj5srdSwP2uYxVmWKuxV2KuxV2KuxV2KsJk8tfmEnnPWtXsNctodMvoYI9Ps7xLq9igaJ&#xA;UEh+qrNaxgu3M8kkB/m51HBVCS+SPOw873/mSPX5vqax3T6Vo6XNz9WM0tpBBALmB2eBo0kSWQBF&#xA;WjEGrVNFU4/L3SvMWl6beWmtXd5ff6T61lPqMsE1yI54IppY2eABeMd08yIOygAfCFxVlOKuxV2K&#xA;v//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>Ivar Clemens</rdf:li>
            </rdf:Seq>
         </dc:creator>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DocumentID>xmp.did:51711A223EF3E111986AACC2ACC5197D</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:51711A223EF3E111986AACC2ACC5197D</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>uuid:8f6ffbf2-2482-4378-a46b-5a702b3d2ad2</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:50711A223EF3E111986AACC2ACC5197D</stRef:instanceID>
            <stRef:documentID>xmp.did:50711A223EF3E111986AACC2ACC5197D</stRef:documentID>
            <stRef:originalDocumentID>uuid:8f6ffbf2-2482-4378-a46b-5a702b3d2ad2</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:CB0EC2C784F2E111AB85874EAF1C8B4F</stEvt:instanceID>
                  <stEvt:when>2012-08-30T11:26:29+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:50711A223EF3E111986AACC2ACC5197D</stEvt:instanceID>
                  <stEvt:when>2012-08-31T10:34:16+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:51711A223EF3E111986AACC2ACC5197D</stEvt:instanceID>
                  <stEvt:when>2012-08-31T10:34:35+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe Acrobat Pro 10.1.3</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>190.500000</stDim:w>
            <stDim:h>89.999847</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Helvetica</stFnt:fontName>
                  <stFnt:fontFamily>Helvetica</stFnt:fontFamily>
                  <stFnt:fontType>Unknown</stFnt:fontType>
                  <stFnt:versionString>Version 2.062;PS 2.000;hotconv 1.0.57;makeotf.lib2.0.21895</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>MyriadPro-Regular.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -232.063 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 232.063 li
540 232.063 li
540 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 232.063 mo
540 232.063 li
540 0 li
0 0 li
0 232.063 li
cp
clp
30.3359 206.905 mo
176.771 206.905 li
176.771 20.3813 li
30.3359 20.3813 li
30.3359 206.905 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
ef
.5 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
30.3359 206.905 mo
30.3359 20.3813 li
176.771 20.3813 li
176.771 206.905 li
30.3359 206.905 li
@
30.3359 206.905 mo
176.771 206.905 li
0 0 0 rgb
@
30.3359 206.905 mo
30.3359 20.3813 li
@
30.3359 206.905 mo
30.3359 205.022 li
@
%ADOBeginSubsetFont: Helvetica Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /Helvetica def
/FontInfo 7 dict dup begin
/Notice (Copyright 1992, 1994, 1997, 2000, 2004 Adobe Systems Incorporated. All rights reserved. Myriad is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def
/Weight (Regular) def
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
def
/FontBBox {-157 -250 1126 952} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-11 -0 674 686 484 495 650 661 710 721 241 248] def
/OtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def
/BlueScale 0.0604583 def
/StdHW [67] def
/StdVW [88] def
/StemSnapV [88 92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/zero <1C60D8A8C9B7BA8F6239473D6D0952B7B27F0FFDEC3D4AC868BB2F3F3
5FB5E9F1C0F84AF60C7D8EABDB59B8E1F960151F9511E55A6B26091EC60E1C90
C277465A6CD6BF415E99C1E3222E5D8229E07EB706E217942A6C6EE460AA0> |-
/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364C
BBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0
D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917
B17192> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/DLHDMG+Helvetica /Helvetica findfont ct_VMDictPut
/DLHDMG+Helvetica*1 
[48{/.notdef}rp /zero 207{/.notdef}rp]
DLHDMG+Helvetica nf
DLHDMG+Helvetica*1 [8 0 0 -8 0 0 ]msf
28.1157 216.659 mo
(0)sh
103.52 206.905 mo
103.52 205.022 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
DLHDMG+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/six <1C60D8A8C9B7BA8F6239473257A8A6F62043E414325CA26487C2B24B19
1B168E0DA687FF84130E464A581CEABD7A1831A83A01C968043ECE2E73D7C0CF
5C7A53E3098E1CA41D075CF1B0FAA4D3D63203DF5A7A1EBF70F4DE9A7FD3C13C
DDAF688040D9BEE80C42C7397D37BC0163DE0936D86331F997A056B7561C404E
F4CCB6BEFB2D969A52553626DC842C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DLHDMG+Helvetica /Encoding get
dup 54 /six put
pop
%ADOEndSubsetFont
/DLHDMG+Helvetica*1 
[48{/.notdef}rp /zero 5{/.notdef}rp /six 201{/.notdef}rp]
DLHDMG+Helvetica nf
DLHDMG+Helvetica*1 [8 0 0 -8 0 0 ]msf
101.3 216.659 mo
(6)sh
176.771 206.905 mo
176.771 205.022 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
DLHDMG+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7BA8F425ECEA255C7F445C46B341EF282C71048D555A5D5
98E89496E7235E7E5E61E755DE1DD927709B69AF39C5FFA2F961FADB> |-
/two <1C60D8A8C9B7BA8F694E6FA15FFB6B382A3EE4F45111A59DACAF941116
582617B9738BB5AF1D396C826652BF6DBB46CC2019C22EEDB26045C1BEFE4887
D256AE5DA3C25CAA99D62ED97486E7939D89DEC92F35F04285> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DLHDMG+Helvetica /Encoding get
dup 49 /one put
dup 50 /two put
pop
%ADOEndSubsetFont
/DLHDMG+Helvetica*1 
[48{/.notdef}rp /zero /one /two 3{/.notdef}rp /six 201{/.notdef}rp]
DLHDMG+Helvetica nf
DLHDMG+Helvetica*1 [8 0 0 -8 0 0 ]msf
172.331 216.659 mo
(12)
[4.104 0 ]xsh
30.3359 206.905 mo
32.1523 206.905 li
@
DLHDMG+Helvetica*1 [8 0 0 -8 0 0 ]msf
24.3496 209.865 mo
(0)sh
30.3359 160.225 mo
32.1523 160.225 li
@
DLHDMG+Helvetica*1 [8 0 0 -8 0 0 ]msf
19.8428 163.184 mo
(20)
[4.104 0 ]xsh
30.3359 113.61 mo
32.1523 113.61 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
DLHDMG+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/four <1C60D8A8C9B7BA8F425ECEAC1D5FB15843FC3AEF325D7DA4AC5B49218
1366F1B4D605798E0A37299E20A2C781E96943F501C8D283CF9274FA8718C41B
B1F2F8D3022028ECD22D73F736D12B17047DF40EDD60B6519E74C55A33C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DLHDMG+Helvetica /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
/DLHDMG+Helvetica*1 
[48{/.notdef}rp /zero /one /two /.notdef /four /.notdef /six 
201{/.notdef}rp]
DLHDMG+Helvetica nf
DLHDMG+Helvetica*1 [8 0 0 -8 0 0 ]msf
19.8428 116.569 mo
(40)
[4.104 0 ]xsh
30.3359 66.9956 mo
32.1523 66.9956 li
@
DLHDMG+Helvetica*1 [8 0 0 -8 0 0 ]msf
19.8428 69.9551 mo
(60)
[4.104 0 ]xsh
30.3359 20.3813 mo
32.1523 20.3813 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
DLHDMG+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B896187A> |-
/degree <1C60D8A8C9B82C91EEDBA5BE46CA4A33C3D1526139A1F1BCD99D090
0A4AB1F099E4AF31100F832AE7B7D456F091CA6973784F98A263B9323A198473
A70849A945C27940D3AD37A005695> |-
/sigma <1C60D8A8C9B7917EF2D4BDF5AB64471CC8552E1311DA1DCDAA8E2F53
1B8420655A41FEB21B7258464949D2D567B52C0B17F2B0088057F8EE6C340007
9E3AB8E13FF7F420A012515F35DCF481581F343B06D36461E79E226ED7F619E3
AAB5292E67F12808CBAD2D2932B1EC1137CB12> |-
/parenleft <1C60D8A8C9B84E0A47D7FED6098F93D599A35099EC3AF2C571CF
0E48D8A711D412E34AAB2732DF92ADCDC95C7C6D97E8C44CE2751654BC55BD12
CD842E> |-
/parenright <1C60D8A8C9B84E0A47D7FED609B3683507871E5C5015E3549BF
91653A329EF8D5BF37DF948A5A8471707D087A577F9EE79FD91DC92667BCDE58
8EC87D3> |-
/eight <1C60D8A8C9B7BA8F623D810BCFAA50091BF89AB5BE3357ACF7A8EC11
C35A526108259CA49EFD17EA8971235551BABBA49C018C3375128659D5D7051D
45E4C4ECFE02CC0D35373F3D4B2DC792F4C41BCD9DEAF2AC24EA7A456EB3C155
13EE5D201ACCA4975153635E279761AFF1AF1596B3D3861988A67B17B4B84234
7EAF131C1ABA71797B1264826F04BDED0719803E211C51F417CEBD773552253C
6786889CD2B3EB81707FCE2453D0BD7C65B6D6DB5614A7F2FDB700BE408D6F36
A3C20DDE8F30CA7C808E9263350AB2907E45DC2CA6BBA6B44E98822CA142BAF4
C98107A946AA8711E8E6F4BC5EB9C6DC60704FA7E3779BF270D263AF4819BBE7
93351D4C> |-
/F <1C60D8A8C9B7544E530E823999841DA2F8EC66E9CFE2CD6B50437205F942
FF37E122B69D17C7AA691A603207160811AFB791> |-
/P <1C60D8A8C9B7876E235FC614E63EC6DDBF5153E7285DD594B4A59D9CFED1
9B0A38B3CB0F4F897304E6BAD66C826BEE7E4169B0E7C80E2CF9471E5F92DE30
A72B04AC0EEA14B3B5B59AE75C5D253EAF073DA7CF16B6D745CDF6FBBE2E5B43
C2B5E88E6AFB64C1CBC51F> |-
/S <1C60D8A8C9B7AED8035FF9728E9C78ACC28F20CC9666D445523C20D6BC6D
45C854A0BE693CA04DDB35CE9C6FCC12699F3ECF3D1B67F9F5777A6EECDAF3C0
F3F32C0B6BC38F752623DB2A9617BDB514ED25F1A310A0C42BE659A27D8F2C06
C4BFA42A6084F73A353D30020A89B386DABBAAA17119B17F011D1BF8067CBFE1
7C2D6AE10C51C95BF00F09A50ED067AF> |-
/a <1C60D8A8C9B75946039FC5B56ED6A50878B478B1780B40C4125CE8039A26
1528F027CE6FDEC5783823498623E2545F156FE1817CCA8E4CEF932EAF146EA4
E45F8E44AF7B3429BDE6EAD3417E01676A62E7E41175148C72742B2C6CC241FF
06B9AE6A99EACBD61DC0A967A1A9EA490A3B86CCCCBA356FE0C46F09ED4CCD9D
7FD84EFCB667453A166D73A23A48C3A48DCEEFA9A85E6DA8EDA33C7A566D8839
3EC5B1BCAE7CEACDFA7D9A043D> |-
/e <1C60D8A8C9B7A66F85F3DBE5AE1E76F6A9740420B265CA4AC9DE99AD8AED
C4233110D7344BA8969F49ACBE3164296BAF8D8824063AB5A81F8F9142D2C049
2C8D085FBBDD29052840FCC873C574581FB314AC3521D9DA4AE8E6D987C45E9E
8106797186054DABC39E6B> |-
/i <1C60D8A8C9B88055FF27B3934D040E8DA53B043AB8CFF68E8D519FEAB9D5
A4874DC9B90E63751BC12355D9D8276E2A66CDDB9CE6DD75534C5A54C45E2D6E
21C6C79BBDA40B7772F2DEC85ADAD3476B> |-
/l <1C60D8A8C9B87EB6C12D27FEBAAD9108B57B5CEF2AA76DC2FD884A8623> |-
/n <1C60D8A8C9B790A816BA887E1EEC2C6B98EC99098FC021FEBA148F884875
E3B03D8F5BA9B51A6918EFA4195D8FABF82DC961545110C1672CA0A5B167A366
46DBDC6B2B1EB2CCFFCB412605A41F5E921E35125025B68561FC08FF5F5A87F0
318D13C761F9DF> |-
/o <1C60D8A8C9B7967683396363C4C5A9E451FFBD75248EC3A8EC4B566E5BD4
E7BBB72EB29C672F7BE91209F1171F84980F7DA08B43C90BC9E3BDC65B190F81
C7A4B1ED6D074E407F8CF228B147D6A94BC016CC67> |-
/p <1C60D8A8C9B7E2CE2B5D9AEC775B38F2FDCA5DD8FB0C9C7D76709EB2E3CE
F7455DFF330D234D9132A6F52698D79064F174F1D99AEB0CF9139A6469F8D4BE
826FAC77DD18B951C7429F3A77A1434C1A624632AE9545E6FD8A1CFF86A978EB
2F9D9C8D213E3AEF1293A1DF353A70DA5E24E2AC4CE8D2656D24B8166AAA778D
66777269CA00CCD283376A690AE85A4058A8C9155FC3FA3A08F87D3A4F002FFB
BE8C69D79181> |-
/t <1C60D8A8C9B821B37F30E246C711EE3A9B1905ECA3B2281EC66105C6FB87
D8A11F34421A86A4C8EB1634F07587A29F1959067E8F5C01D391C88E64020888
37AF0D6E016A2B2057BCC898EDBE8C7509BAF139B3EFB89894D72C8915100CD3
D16C57> |-
/x <1C60D8A8C9B74CDDCE74E25740A68E8EC93756D85AEDEDDC715C2E343856
089CBF3B8126FA9B43C70F5E5E660A33AAD5AB29D3CF51EA27446736F5DCED8E
976C7B422ADF6C970DBFFC4BB6364510FCD37FB93596C6B594457047595B6C2E
545BFDEA968F36> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DLHDMG+Helvetica /Encoding get
dup 32 /space put
dup 33 /degree put
dup 34 /sigma put
dup 40 /parenleft put
dup 41 /parenright put
dup 56 /eight put
dup 70 /F put
dup 80 /P put
dup 83 /S put
dup 97 /a put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 116 /t put
dup 120 /x put
pop
%ADOEndSubsetFont
/DLHDMG+Helvetica*1 
[32{/.notdef}rp /space /degree /sigma 5{/.notdef}rp /parenleft /parenright 6{/.notdef}rp 
/zero /one /two /.notdef /four /.notdef /six /.notdef 
/eight 13{/.notdef}rp /F 9{/.notdef}rp /P 2{/.notdef}rp /S 13{/.notdef}rp 
/a 3{/.notdef}rp /e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef 
/n /o /p 3{/.notdef}rp /t 3{/.notdef}rp /x 135{/.notdef}rp]
DLHDMG+Helvetica nf
DLHDMG+Helvetica*1 [8 0 0 -8 0 0 ]msf
19.8428 23.3408 mo
(80)
[4.104 0 ]xsh
DLHDMG+Helvetica*1 [10 0 0 -10 0 0 ]msf
62.7754 230.515 mo
(Fixatio)sh
90.5752 230.515 mo
(n point FP \(!\))
[5.5498 2.12012 5.68945 5.49023 2.33984 5.5498 3.31006 2.12012 4.86963 5.32031 2.11963 2.83984 
3.18018 0 ]xsh
DLHDMG+Helvetica*1 [0 -10 -10 0 0 0 ]msf
12.5107 135.587 mo
(Slope " \(!\) )
[-4.93018 -2.35986 -5.48975 -5.68994 -5.00977 -2.12012 -5.53955 -2.12012 -2.83984 -3.18018 -2.83984 0 
]ysh
grestore
gsave
30.3359 20.3813 mo
176.838 20.3813 li
176.838 206.974 li
30.3359 206.974 li
30.3359 20.3813 li
cp
clp
2 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
30.3359 192.31 mo
176.771 110.448 li
false sop
0 0 0 rgb
@
1 lw
91.8159 169.372 mo
91.8159 152.018 li
.309804 .505882 .741176 rgb
@
88.7891 152.018 mo
94.9102 152.018 li
@
88.7891 169.372 mo
94.9102 169.372 li
@
80.1792 187.533 mo
80.1792 179.395 li
.45098 .733333 .34902 rgb
@
77.085 179.395 mo
83.2061 179.395 li
@
77.085 187.533 mo
83.2061 187.533 li
@
67.7358 187.668 mo
67.7358 179.731 li
.752941 .313726 .301961 rgb
@
64.6411 179.731 mo
70.7627 179.731 li
@
64.6411 187.668 mo
70.7627 187.668 li
@
55.6279 176.637 mo
55.6279 170.112 li
.501961 .392157 .635294 rgb
@
52.6011 170.112 mo
58.6548 170.112 li
@
52.6011 176.637 mo
58.6548 176.637 li
@
73.9233 183.901 mo
73.9233 167.152 li
.309804 .505882 .741176 rgb
@
70.8965 167.152 mo
77.0181 167.152 li
@
70.8965 183.901 mo
77.0181 183.901 li
@
73.9233 188.946 mo
73.9233 163.722 li
.45098 .733333 .34902 rgb
@
70.8965 163.722 mo
77.0181 163.722 li
@
70.8965 188.946 mo
77.0181 188.946 li
@
73.9233 186.457 mo
73.9233 148.991 li
.752941 .313726 .301961 rgb
@
70.8965 148.991 mo
77.0181 148.991 li
@
70.8965 186.457 mo
77.0181 186.457 li
@
73.9233 149.596 mo
73.9233 123.968 li
.501961 .392157 .635294 rgb
@
70.8965 123.968 mo
77.0181 123.968 li
@
70.8965 149.596 mo
77.0181 149.596 li
@
152.421 134.462 mo
152.421 91.6812 li
.309804 .505882 .741176 rgb
@
149.395 91.6812 mo
155.448 91.6812 li
@
149.395 134.462 mo
155.448 134.462 li
@
129.484 181.749 mo
129.484 165.605 li
.45098 .733333 .34902 rgb
@
126.458 165.605 mo
132.579 165.605 li
@
126.458 181.749 mo
132.579 181.749 li
@
104.933 184.843 mo
104.933 137.556 li
.752941 .313726 .301961 rgb
@
101.906 137.556 mo
107.959 137.556 li
@
101.906 184.843 mo
107.959 184.843 li
@
80.8521 160.022 mo
80.8521 141.054 li
.501961 .392157 .635294 rgb
@
77.8252 141.054 mo
83.9463 141.054 li
@
77.8252 160.022 mo
83.9463 160.022 li
@
117.242 176.166 mo
117.242 169.91 li
.309804 .505882 .741176 rgb
@
114.215 169.91 mo
120.269 169.91 li
@
114.215 176.166 mo
120.269 176.166 li
@
117.242 177.915 mo
117.242 141.054 li
.45098 .733333 .34902 rgb
@
114.215 141.054 mo
120.269 141.054 li
@
114.215 177.915 mo
120.269 177.915 li
@
117.242 177.915 mo
117.242 150.201 li
.752941 .313726 .301961 rgb
@
114.215 150.201 mo
120.269 150.201 li
@
114.215 177.915 mo
120.269 177.915 li
@
117.242 57.3096 mo
117.242 25.5605 li
.501961 .392157 .635294 rgb
@
114.215 25.5605 mo
120.269 25.5605 li
@
114.215 57.3096 mo
120.269 57.3096 li
@
grestore
gsave
0 232.063 mo
0 0 li
540 0 li
540 232.063 li
0 232.063 li
cp
clp
93.834 160.694 mo
93.834 161.81 92.9302 162.713 91.8159 162.713 cv
90.7021 162.713 89.7983 161.81 89.7983 160.694 cv
89.7983 159.581 90.7021 158.677 91.8159 158.677 cv
92.9302 158.677 93.834 159.581 93.834 160.694 cv
false sop
1 1 1 rgb
f
1 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
93.834 160.694 mo
93.834 161.81 92.9302 162.713 91.8159 162.713 cv
90.7021 162.713 89.7983 161.81 89.7983 160.694 cv
89.7983 159.581 90.7021 158.677 91.8159 158.677 cv
92.9302 158.677 93.834 159.581 93.834 160.694 cv
.309804 .505882 .741176 rgb
@
82.1973 183.431 mo
82.1973 184.545 81.2939 185.448 80.1792 185.448 cv
79.0649 185.448 78.1611 184.545 78.1611 183.431 cv
78.1611 182.315 79.0649 181.412 80.1792 181.412 cv
81.2939 181.412 82.1973 182.315 82.1973 183.431 cv
1 1 1 rgb
f
82.1973 183.431 mo
82.1973 184.545 81.2939 185.448 80.1792 185.448 cv
79.0649 185.448 78.1611 184.545 78.1611 183.431 cv
78.1611 182.315 79.0649 181.412 80.1792 181.412 cv
81.2939 181.412 82.1973 182.315 82.1973 183.431 cv
.45098 .733333 .34902 rgb
@
69.7534 183.699 mo
69.7534 184.813 68.8501 185.717 67.7358 185.717 cv
66.6211 185.717 65.7178 184.813 65.7178 183.699 cv
65.7178 182.586 66.6211 181.682 67.7358 181.682 cv
68.8501 181.682 69.7534 182.586 69.7534 183.699 cv
1 1 1 rgb
f
69.7534 183.699 mo
69.7534 184.813 68.8501 185.717 67.7358 185.717 cv
66.6211 185.717 65.7178 184.813 65.7178 183.699 cv
65.7178 182.586 66.6211 181.682 67.7358 181.682 cv
68.8501 181.682 69.7534 182.586 69.7534 183.699 cv
.752941 .313726 .301961 rgb
@
57.646 173.341 mo
57.646 174.455 56.7422 175.358 55.6279 175.358 cv
54.5137 175.358 53.6104 174.455 53.6104 173.341 cv
53.6104 172.227 54.5137 171.323 55.6279 171.323 cv
56.7422 171.323 57.646 172.227 57.646 173.341 cv
1 1 1 rgb
f
57.646 173.341 mo
57.646 174.455 56.7422 175.358 55.6279 175.358 cv
54.5137 175.358 53.6104 174.455 53.6104 173.341 cv
53.6104 172.227 54.5137 171.323 55.6279 171.323 cv
56.7422 171.323 57.646 172.227 57.646 173.341 cv
.501961 .392157 .635294 rgb
@
72.3091 177.175 mo
75.5381 177.175 li
75.5381 173.946 li
72.3091 173.946 li
72.3091 177.175 li
cp
1 1 1 rgb
ef
0 lj
72.3091 177.175 mo
75.5381 177.175 li
75.5381 173.946 li
72.3091 173.946 li
72.3091 177.175 li
cp
.309804 .505882 .741176 rgb
@
72.3091 177.982 mo
75.5381 177.982 li
75.5381 174.753 li
72.3091 174.753 li
72.3091 177.982 li
cp
1 1 1 rgb
ef
72.3091 177.982 mo
75.5381 177.982 li
75.5381 174.753 li
72.3091 174.753 li
72.3091 177.982 li
cp
.45098 .733333 .34902 rgb
@
72.3091 169.305 mo
75.5381 169.305 li
75.5381 166.076 li
72.3091 166.076 li
72.3091 169.305 li
cp
1 1 1 rgb
ef
72.3091 169.305 mo
75.5381 169.305 li
75.5381 166.076 li
72.3091 166.076 li
72.3091 169.305 li
cp
.752941 .313726 .301961 rgb
@
72.3091 138.363 mo
75.5381 138.363 li
75.5381 135.135 li
72.3091 135.135 li
72.3091 138.363 li
cp
1 1 1 rgb
ef
72.3091 138.363 mo
75.5381 138.363 li
75.5381 135.135 li
72.3091 135.135 li
72.3091 138.363 li
cp
.501961 .392157 .635294 rgb
@
154.439 113.071 mo
154.439 114.186 153.536 115.089 152.421 115.089 cv
151.308 115.089 150.403 114.186 150.403 113.071 cv
150.403 111.958 151.308 111.054 152.421 111.054 cv
153.536 111.054 154.439 111.958 154.439 113.071 cv
.309804 .505882 .741176 rgb
f
154.439 113.071 mo
154.439 114.186 153.536 115.089 152.421 115.089 cv
151.308 115.089 150.403 114.186 150.403 113.071 cv
150.403 111.958 151.308 111.054 152.421 111.054 cv
153.536 111.054 154.439 111.958 154.439 113.071 cv
@
131.502 173.678 mo
131.502 174.791 130.598 175.695 129.484 175.695 cv
128.37 175.695 127.467 174.791 127.467 173.678 cv
127.467 172.563 128.37 171.659 129.484 171.659 cv
130.598 171.659 131.502 172.563 131.502 173.678 cv
.45098 .733333 .34902 rgb
f
131.502 173.678 mo
131.502 174.791 130.598 175.695 129.484 175.695 cv
128.37 175.695 127.467 174.791 127.467 173.678 cv
127.467 172.563 128.37 171.659 129.484 171.659 cv
130.598 171.659 131.502 172.563 131.502 173.678 cv
@
106.951 161.166 mo
106.951 162.28 106.046 163.185 104.933 163.185 cv
103.819 163.185 102.915 162.28 102.915 161.166 cv
102.915 160.052 103.819 159.148 104.933 159.148 cv
106.046 159.148 106.951 160.052 106.951 161.166 cv
.752941 .313726 .301961 rgb
f
106.951 161.166 mo
106.951 162.28 106.046 163.185 104.933 163.185 cv
103.819 163.185 102.915 162.28 102.915 161.166 cv
102.915 160.052 103.819 159.148 104.933 159.148 cv
106.046 159.148 106.951 160.052 106.951 161.166 cv
@
82.8701 150.538 mo
82.8701 151.652 81.9663 152.556 80.8521 152.556 cv
79.7378 152.556 78.8345 151.652 78.8345 150.538 cv
78.8345 149.424 79.7378 148.521 80.8521 148.521 cv
81.9663 148.521 82.8701 149.424 82.8701 150.538 cv
.501961 .392157 .635294 rgb
f
82.8701 150.538 mo
82.8701 151.652 81.9663 152.556 80.8521 152.556 cv
79.7378 152.556 78.8345 151.652 78.8345 150.538 cv
78.8345 149.424 79.7378 148.521 80.8521 148.521 cv
81.9663 148.521 82.8701 149.424 82.8701 150.538 cv
@
115.628 174.687 mo
118.856 174.687 li
118.856 171.458 li
115.628 171.458 li
115.628 174.687 li
cp
.309804 .505882 .741176 rgb
ef
115.628 174.687 mo
118.856 174.687 li
118.856 171.458 li
115.628 171.458 li
115.628 174.687 li
cp
@
115.628 161.099 mo
118.856 161.099 li
118.856 157.87 li
115.628 157.87 li
115.628 161.099 li
cp
.45098 .733333 .34902 rgb
ef
115.628 161.099 mo
118.856 161.099 li
118.856 157.87 li
115.628 157.87 li
115.628 161.099 li
cp
@
115.628 165.673 mo
118.856 165.673 li
118.856 162.444 li
115.628 162.444 li
115.628 165.673 li
cp
.752941 .313726 .301961 rgb
ef
115.628 165.673 mo
118.856 165.673 li
118.856 162.444 li
115.628 162.444 li
115.628 165.673 li
cp
@
115.628 43.0488 mo
118.856 43.0488 li
118.856 39.8203 li
115.628 39.8203 li
115.628 43.0488 li
cp
.501961 .392157 .635294 rgb
ef
115.628 43.0488 mo
118.856 43.0488 li
118.856 39.8203 li
115.628 39.8203 li
115.628 43.0488 li
cp
@
0 0 0 rgb
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
DLHDMG+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/period <1C60D8A8C9B89DB76243241956147685E9D11B558168E06D18275E2
338D279B9913C7A1D115D13271EAC> |-
/five <1C60D8A8C9B7BA8F622456C4991FA35B552AABDBA410C5FE2A289D1C4
B46CC6EA81B6F378E0E9FBB887620926C1C295BED9DF5CC60E1506BC8F14C40D
D7EC5F146AE0B602E11477020F8E0DC1E61B7E5001ACA3564CDADF4245B4EB16
6D458A0663DB06F2579480E048AFCB0FC> |-
/equal <1C60D8A8C9B7C7F3AB181AB0C0D4CCBD039E0B840C2FD0290F361F5F
ADEFB5C66FFFF03997F6A3C47D6E28F621A8DA> |-
/greater <1C60D8A8C9B7C7F3FCFFFDB158B184E3A87342224D39972949AA7D
72E56B6F8812323673BFA1A5A6430DFA47C9593AB4108B0AB2> |-
/A <1C60D8A8C9B7D7E88499B0B4629F6223175CD4E8063229FBCC9F00B932F1
5865B21E5E7BB034E6AEB00B8493B7416EA5F21E0E31EA4A4AA7B249DD04C202
0B54E2FE3571164F33157FAF89CB55ED12EC09CD04764D59017211B80D8BF81F
E221E84A40> |-
/R <1C60D8A8C9B7818197CA8C10BDEF0792283B4AD60A4778EF579EA03A9938
895E46A3DD671B55D56CE5AC1FF66AA5C5464B6272AB067D7AABFB9BA4824D96
D968B50E7E75C15CA7D5303E4D6EB750FDAD2DAE18E237F2D0B786B8A46E9DCB
053FB02CA78233BC22EC230776B8699564C207758BBC5B113141> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DLHDMG+Helvetica /Encoding get
dup 46 /period put
dup 53 /five put
dup 61 /equal put
dup 62 /greater put
dup 65 /A put
dup 82 /R put
pop
%ADOEndSubsetFont
/DLHDMG+Helvetica*1 
[32{/.notdef}rp /space /degree /sigma 5{/.notdef}rp /parenleft /parenright 4{/.notdef}rp 
/period /.notdef /zero /one /two /.notdef /four /five 
/six /.notdef /eight 4{/.notdef}rp /equal /greater 2{/.notdef}rp /A 
4{/.notdef}rp /F 9{/.notdef}rp /P /.notdef /R /S 13{/.notdef}rp 
/a 3{/.notdef}rp /e 3{/.notdef}rp /i 2{/.notdef}rp /l /.notdef 
/n /o /p 3{/.notdef}rp /t 3{/.notdef}rp /x 135{/.notdef}rp]
DLHDMG+Helvetica nf
DLHDMG+Helvetica*1 [14.5291 0 0 -14.5291 0 0 ]msf
12.04 16.21 mo
(A)sh
DLHDMG+Helvetica*1 [8.07175 0 0 -8.07175 0 0 ]msf
36.1875 32.8921 mo
(R)sh
DLHDMG+Helvetica*1 [6.4574 0 0 -6.4574 0 0 ]msf
41.9722 28.856 mo
(2)sh
DLHDMG+Helvetica*1 [8.07175 0 0 -8.07175 0 0 ]msf
45.5376 32.8921 mo
( = 0.18)
[1.71094 4.81104 1.71094 4.14063 1.6709 4.14063 0 ]xsh
36.1875 42.1748 mo
(  p > 0.05)
[1.71094 1.71143 4.59277 1.71094 4.81055 1.71143 4.14063 1.67041 4.14111 0 ]xsh
209.327 206.905 mo
355.829 206.905 li
355.829 20.3813 li
209.327 20.3813 li
209.327 206.905 li
cp
1 1 1 rgb
ef
.5 lw
209.327 206.905 mo
209.327 20.3813 li
355.829 20.3813 li
355.829 206.905 li
209.327 206.905 li
@
209.327 206.905 mo
355.829 206.905 li
0 0 0 rgb
@
209.327 206.905 mo
209.327 20.3813 li
@
209.327 206.905 mo
209.327 205.022 li
@
DLHDMG+Helvetica*1 [8 0 0 -8 0 0 ]msf
207.106 216.659 mo
(0)sh
282.578 206.905 mo
282.578 205.022 li
@
DLHDMG+Helvetica*1 [8 0 0 -8 0 0 ]msf
280.358 216.659 mo
(6)sh
355.829 206.905 mo
355.829 205.022 li
@
DLHDMG+Helvetica*1 [8 0 0 -8 0 0 ]msf
351.39 216.659 mo
(12)
[4.10352 0 ]xsh
209.327 206.905 mo
211.143 206.905 li
@
209.327 160.225 mo
211.143 160.225 li
@
209.327 113.61 mo
211.143 113.61 li
@
209.327 66.9956 mo
211.143 66.9956 li
@
209.327 20.3813 mo
211.143 20.3813 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
DLHDMG+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/c <1C60D8A8C9B77BBBDD6F2DE36836EA750B0DCDA2C66B70D3B3E9B799935A
114CCF88968CB157B7DEA63450CA5D1B4BBF8E61AF225B205D414E242FC06624
097F1B5D47BF4F384727F53BA1763156DBDB0266> |-
/f <1C60D8A8C9B8469EE0EEFD5AEC6CA97A72064EDB5F8138E6D1529C05D71A
D800DE9767801FDF34CB86E1E21FD9D405698D46905E6F519DDB7CBC96570BA0
9B7E74CE45A9784C89ACE8876894AF309C859106C75B1212CD> |-
/r <1C60D8A8C9B825FA276057E430FDF01407E8A25201058EF45B5C185214AB
1116383552C8A26ACD44FF0BE1E00A052AF17C7B552C44648BDA524B50952CB0
AE525A4563499AD1C42D4D0C12A5AD458628362FB1B81E032637466F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DLHDMG+Helvetica /Encoding get
dup 99 /c put
dup 102 /f put
dup 114 /r put
pop
%ADOEndSubsetFont
/DLHDMG+Helvetica*1 
[32{/.notdef}rp /space /degree /sigma 5{/.notdef}rp /parenleft /parenright 4{/.notdef}rp 
/period /.notdef /zero /one /two /.notdef /four /five 
/six /.notdef /eight 4{/.notdef}rp /equal /greater 2{/.notdef}rp /A 
4{/.notdef}rp /F 9{/.notdef}rp /P /.notdef /R /S 13{/.notdef}rp 
/a /.notdef /c /.notdef /e /f 2{/.notdef}rp /i 
2{/.notdef}rp /l /.notdef /n /o /p /.notdef /r 
/.notdef /t 3{/.notdef}rp /x 135{/.notdef}rp]
DLHDMG+Helvetica nf
DLHDMG+Helvetica*1 [10 0 0 -10 0 0 ]msf
253.721 230.515 mo
(Refe)sh
272.041 230.515 mo
(rence R \(!\))
[3.26953 5.00977 5.55078 4.47949 5.00977 2.12012 5.37988 2.12012 2.83984 3.17969 0 ]xsh
grestore
gsave
209.327 20.3813 mo
355.897 20.3813 li
355.897 206.974 li
209.327 206.974 li
209.327 20.3813 li
cp
clp
2 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
209.327 151.884 mo
355.829 160.896 li
false sop
0 0 0 rgb
@
1 lw
252.982 169.372 mo
252.982 152.018 li
.309804 .505882 .741176 rgb
@
249.888 152.018 mo
256.009 152.018 li
@
249.888 169.372 mo
256.009 169.372 li
@
252.982 187.533 mo
252.982 179.395 li
.45098 .733333 .34902 rgb
@
249.888 179.395 mo
256.009 179.395 li
@
249.888 187.533 mo
256.009 187.533 li
@
252.982 187.668 mo
252.982 179.731 li
.752941 .313726 .301961 rgb
@
249.888 179.731 mo
256.009 179.731 li
@
249.888 187.668 mo
256.009 187.668 li
@
252.982 176.637 mo
252.982 170.112 li
.501961 .392157 .635294 rgb
@
249.888 170.112 mo
256.009 170.112 li
@
249.888 176.637 mo
256.009 176.637 li
@
270.874 183.901 mo
270.874 167.152 li
.309804 .505882 .741176 rgb
@
267.78 167.152 mo
273.901 167.152 li
@
267.78 183.901 mo
273.901 183.901 li
@
259.17 188.946 mo
259.17 163.722 li
.45098 .733333 .34902 rgb
@
256.143 163.722 mo
262.197 163.722 li
@
256.143 188.946 mo
262.197 188.946 li
@
246.727 186.457 mo
246.727 148.991 li
.752941 .313726 .301961 rgb
@
243.7 148.991 mo
249.753 148.991 li
@
243.7 186.457 mo
249.753 186.457 li
@
234.619 149.596 mo
234.619 123.968 li
.501961 .392157 .635294 rgb
@
231.592 123.968 mo
237.646 123.968 li
@
231.592 149.596 mo
237.646 149.596 li
@
296.3 134.462 mo
296.3 91.6812 li
.309804 .505882 .741176 rgb
@
293.206 91.6812 mo
299.327 91.6812 li
@
293.206 134.462 mo
299.327 134.462 li
@
296.3 181.749 mo
296.3 165.605 li
.45098 .733333 .34902 rgb
@
293.206 165.605 mo
299.327 165.605 li
@
293.206 181.749 mo
299.327 181.749 li
@
296.3 184.843 mo
296.3 137.556 li
.752941 .313726 .301961 rgb
@
293.206 137.556 mo
299.327 137.556 li
@
293.206 184.843 mo
299.327 184.843 li
@
296.3 160.022 mo
296.3 141.054 li
.501961 .392157 .635294 rgb
@
293.206 141.054 mo
299.327 141.054 li
@
293.206 160.022 mo
299.327 160.022 li
@
331.48 176.166 mo
331.48 169.91 li
.309804 .505882 .741176 rgb
@
328.453 169.91 mo
334.507 169.91 li
@
328.453 176.166 mo
334.507 176.166 li
@
308.543 177.915 mo
308.543 141.054 li
.45098 .733333 .34902 rgb
@
305.516 141.054 mo
311.569 141.054 li
@
305.516 177.915 mo
311.569 177.915 li
@
283.924 177.915 mo
283.924 150.201 li
.752941 .313726 .301961 rgb
@
280.896 150.201 mo
287.018 150.201 li
@
280.896 177.915 mo
287.018 177.915 li
@
259.91 57.3096 mo
259.91 25.5605 li
.501961 .392157 .635294 rgb
@
256.816 25.5605 mo
262.937 25.5605 li
@
256.816 57.3096 mo
262.937 57.3096 li
@
grestore
gsave
0 232.063 mo
0 0 li
540 0 li
540 232.063 li
0 232.063 li
cp
clp
255 160.694 mo
255 161.81 254.096 162.713 252.982 162.713 cv
251.868 162.713 250.964 161.81 250.964 160.694 cv
250.964 159.581 251.868 158.677 252.982 158.677 cv
254.096 158.677 255 159.581 255 160.694 cv
false sop
1 1 1 rgb
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
255 160.694 mo
255 161.81 254.096 162.713 252.982 162.713 cv
251.868 162.713 250.964 161.81 250.964 160.694 cv
250.964 159.581 251.868 158.677 252.982 158.677 cv
254.096 158.677 255 159.581 255 160.694 cv
.309804 .505882 .741176 rgb
@
255 183.431 mo
255 184.545 254.096 185.448 252.982 185.448 cv
251.868 185.448 250.964 184.545 250.964 183.431 cv
250.964 182.315 251.868 181.412 252.982 181.412 cv
254.096 181.412 255 182.315 255 183.431 cv
1 1 1 rgb
f
255 183.431 mo
255 184.545 254.096 185.448 252.982 185.448 cv
251.868 185.448 250.964 184.545 250.964 183.431 cv
250.964 182.315 251.868 181.412 252.982 181.412 cv
254.096 181.412 255 182.315 255 183.431 cv
.45098 .733333 .34902 rgb
@
255 183.699 mo
255 184.813 254.096 185.717 252.982 185.717 cv
251.868 185.717 250.964 184.813 250.964 183.699 cv
250.964 182.586 251.868 181.682 252.982 181.682 cv
254.096 181.682 255 182.586 255 183.699 cv
1 1 1 rgb
f
255 183.699 mo
255 184.813 254.096 185.717 252.982 185.717 cv
251.868 185.717 250.964 184.813 250.964 183.699 cv
250.964 182.586 251.868 181.682 252.982 181.682 cv
254.096 181.682 255 182.586 255 183.699 cv
.752941 .313726 .301961 rgb
@
255 173.341 mo
255 174.455 254.096 175.358 252.982 175.358 cv
251.868 175.358 250.964 174.455 250.964 173.341 cv
250.964 172.227 251.868 171.323 252.982 171.323 cv
254.096 171.323 255 172.227 255 173.341 cv
1 1 1 rgb
f
255 173.341 mo
255 174.455 254.096 175.358 252.982 175.358 cv
251.868 175.358 250.964 174.455 250.964 173.341 cv
250.964 172.227 251.868 171.323 252.982 171.323 cv
254.096 171.323 255 172.227 255 173.341 cv
.501961 .392157 .635294 rgb
@
269.26 177.175 mo
272.488 177.175 li
272.488 173.946 li
269.26 173.946 li
269.26 177.175 li
cp
1 1 1 rgb
ef
269.26 177.175 mo
272.488 177.175 li
272.488 173.946 li
269.26 173.946 li
269.26 177.175 li
cp
.309804 .505882 .741176 rgb
@
257.556 177.982 mo
260.785 177.982 li
260.785 174.753 li
257.556 174.753 li
257.556 177.982 li
cp
1 1 1 rgb
ef
257.556 177.982 mo
260.785 177.982 li
260.785 174.753 li
257.556 174.753 li
257.556 177.982 li
cp
.45098 .733333 .34902 rgb
@
245.112 169.305 mo
248.341 169.305 li
248.341 166.076 li
245.112 166.076 li
245.112 169.305 li
cp
1 1 1 rgb
ef
245.112 169.305 mo
248.341 169.305 li
248.341 166.076 li
245.112 166.076 li
245.112 169.305 li
cp
.752941 .313726 .301961 rgb
@
233.005 138.363 mo
236.233 138.363 li
236.233 135.135 li
233.005 135.135 li
233.005 138.363 li
cp
1 1 1 rgb
ef
233.005 138.363 mo
236.233 138.363 li
236.233 135.135 li
233.005 135.135 li
233.005 138.363 li
cp
.501961 .392157 .635294 rgb
@
298.318 113.071 mo
298.318 114.186 297.415 115.089 296.3 115.089 cv
295.187 115.089 294.282 114.186 294.282 113.071 cv
294.282 111.958 295.187 111.054 296.3 111.054 cv
297.415 111.054 298.318 111.958 298.318 113.071 cv
.309804 .505882 .741176 rgb
f
298.318 113.071 mo
298.318 114.186 297.415 115.089 296.3 115.089 cv
295.187 115.089 294.282 114.186 294.282 113.071 cv
294.282 111.958 295.187 111.054 296.3 111.054 cv
297.415 111.054 298.318 111.958 298.318 113.071 cv
@
298.318 173.678 mo
298.318 174.791 297.415 175.695 296.3 175.695 cv
295.187 175.695 294.282 174.791 294.282 173.678 cv
294.282 172.563 295.187 171.659 296.3 171.659 cv
297.415 171.659 298.318 172.563 298.318 173.678 cv
.45098 .733333 .34902 rgb
f
298.318 173.678 mo
298.318 174.791 297.415 175.695 296.3 175.695 cv
295.187 175.695 294.282 174.791 294.282 173.678 cv
294.282 172.563 295.187 171.659 296.3 171.659 cv
297.415 171.659 298.318 172.563 298.318 173.678 cv
@
298.318 161.166 mo
298.318 162.28 297.415 163.185 296.3 163.185 cv
295.187 163.185 294.282 162.28 294.282 161.166 cv
294.282 160.052 295.187 159.148 296.3 159.148 cv
297.415 159.148 298.318 160.052 298.318 161.166 cv
.752941 .313726 .301961 rgb
f
298.318 161.166 mo
298.318 162.28 297.415 163.185 296.3 163.185 cv
295.187 163.185 294.282 162.28 294.282 161.166 cv
294.282 160.052 295.187 159.148 296.3 159.148 cv
297.415 159.148 298.318 160.052 298.318 161.166 cv
@
298.318 150.538 mo
298.318 151.652 297.415 152.556 296.3 152.556 cv
295.187 152.556 294.282 151.652 294.282 150.538 cv
294.282 149.424 295.187 148.521 296.3 148.521 cv
297.415 148.521 298.318 149.424 298.318 150.538 cv
.501961 .392157 .635294 rgb
f
298.318 150.538 mo
298.318 151.652 297.415 152.556 296.3 152.556 cv
295.187 152.556 294.282 151.652 294.282 150.538 cv
294.282 149.424 295.187 148.521 296.3 148.521 cv
297.415 148.521 298.318 149.424 298.318 150.538 cv
@
329.865 174.687 mo
333.095 174.687 li
333.095 171.458 li
329.865 171.458 li
329.865 174.687 li
cp
.309804 .505882 .741176 rgb
ef
329.865 174.687 mo
333.095 174.687 li
333.095 171.458 li
329.865 171.458 li
329.865 174.687 li
cp
@
306.929 161.099 mo
310.157 161.099 li
310.157 157.87 li
306.929 157.87 li
306.929 161.099 li
cp
.45098 .733333 .34902 rgb
ef
306.929 161.099 mo
310.157 161.099 li
310.157 157.87 li
306.929 157.87 li
306.929 161.099 li
cp
@
282.31 165.673 mo
285.538 165.673 li
285.538 162.444 li
282.31 162.444 li
282.31 165.673 li
cp
.752941 .313726 .301961 rgb
ef
282.31 165.673 mo
285.538 165.673 li
285.538 162.444 li
282.31 162.444 li
282.31 165.673 li
cp
@
258.296 43.0488 mo
261.524 43.0488 li
261.524 39.8203 li
258.296 39.8203 li
258.296 43.0488 li
cp
.501961 .392157 .635294 rgb
ef
258.296 43.0488 mo
261.524 43.0488 li
261.524 39.8203 li
258.296 39.8203 li
258.296 43.0488 li
cp
@
0 0 0 rgb
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
DLHDMG+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/B <1C60D8A8C9B79D2DDA73CBA562CCA616611FA2F6D9A4F73A34564160886E
9CF893B5F30C6CA3CC5C829E6C86CCD8B6039E0C7F2FD0FFEC5790BDC97E18D5
0224F8DBF29BE62BF93B9B46A0E426252323AF779BE129778FBC2237B0172C86
2C48766856E64A95D30B6FDF49C5041364379F758936E5F343D201DDC5AF9E1C
C2D12A5BB71D809FD0C76D483DCA8BBD4974D0EC93996621F2710B5158F15640
1628A148FF8FBE9DF1DF727E152C865F07> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DLHDMG+Helvetica /Encoding get
dup 66 /B put
pop
%ADOEndSubsetFont
/DLHDMG+Helvetica*1 
[32{/.notdef}rp /space /degree /sigma 5{/.notdef}rp /parenleft /parenright 4{/.notdef}rp 
/period /.notdef /zero /one /two /.notdef /four /five 
/six /.notdef /eight 4{/.notdef}rp /equal /greater 2{/.notdef}rp /A 
/B 3{/.notdef}rp /F 9{/.notdef}rp /P /.notdef /R /S 
13{/.notdef}rp /a /.notdef /c /.notdef /e /f 2{/.notdef}rp 
/i 2{/.notdef}rp /l /.notdef /n /o /p /.notdef 
/r /.notdef /t 3{/.notdef}rp /x 135{/.notdef}rp]
DLHDMG+Helvetica nf
DLHDMG+Helvetica*1 [14.5291 0 0 -14.5291 0 0 ]msf
191.031 16.21 mo
(B)sh
DLHDMG+Helvetica*1 [8.07175 0 0 -8.07175 0 0 ]msf
215.179 32.8921 mo
(R)sh
DLHDMG+Helvetica*1 [6.4574 0 0 -6.4574 0 0 ]msf
220.963 28.856 mo
(2)sh
DLHDMG+Helvetica*1 [8.07175 0 0 -8.07175 0 0 ]msf
224.529 32.8921 mo
( = 0.00)
[1.71094 4.81104 1.71094 4.14063 1.6709 4.14063 0 ]xsh
215.179 42.1748 mo
(  p > 0.05)
[1.71094 1.71143 4.59277 1.71094 4.81055 1.71143 4.14063 1.67041 4.14111 0 ]xsh
388.386 206.905 mo
534.82 206.905 li
534.82 20.3813 li
388.386 20.3813 li
388.386 206.905 li
cp
1 1 1 rgb
ef
.5 lw
388.386 206.905 mo
388.386 20.3813 li
534.82 20.3813 li
534.82 206.905 li
388.386 206.905 li
@
388.386 206.905 mo
534.82 206.905 li
0 0 0 rgb
@
388.386 206.905 mo
388.386 20.3813 li
@
388.386 206.905 mo
388.386 205.022 li
@
DLHDMG+Helvetica*1 [8 0 0 -8 0 0 ]msf
386.166 216.659 mo
(0)sh
424.978 206.905 mo
424.978 205.022 li
@
DLHDMG+Helvetica*1 [8 0 0 -8 0 0 ]msf
422.758 216.659 mo
(1)sh
461.569 206.905 mo
461.569 205.022 li
@
DLHDMG+Helvetica*1 [8 0 0 -8 0 0 ]msf
459.349 216.659 mo
(2)sh
498.162 206.905 mo
498.162 205.022 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
DLHDMG+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7BA8F622456C4A5B0CA9B1BA284AF806928062A6B7B09
FB3F0AFA0642E6C0751425F2912B774695F4573A7ED10CC8657328CADE6CD5BA
97A6C5BF6C1485B23CC65AC596605B697818C329637772F63BFEC9BF78A14135
7498BBAC8062C44F8B28D5A5EFBE38074FF4A38C9291B6291D33E32B99042454
59FFD3AE6CFBA6472FEF21B7BFBB29FDDBA248755ED07D6E4AD20219> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DLHDMG+Helvetica /Encoding get
dup 51 /three put
pop
%ADOEndSubsetFont
/DLHDMG+Helvetica*1 
[32{/.notdef}rp /space /degree /sigma 5{/.notdef}rp /parenleft /parenright 4{/.notdef}rp 
/period /.notdef /zero /one /two /three /four /five 
/six /.notdef /eight 4{/.notdef}rp /equal /greater 2{/.notdef}rp /A 
/B 3{/.notdef}rp /F 9{/.notdef}rp /P /.notdef /R /S 
13{/.notdef}rp /a /.notdef /c /.notdef /e /f 2{/.notdef}rp 
/i 2{/.notdef}rp /l /.notdef /n /o /p /.notdef 
/r /.notdef /t 3{/.notdef}rp /x 135{/.notdef}rp]
DLHDMG+Helvetica nf
DLHDMG+Helvetica*1 [8 0 0 -8 0 0 ]msf
495.941 216.659 mo
(3)sh
534.82 206.905 mo
534.82 205.022 li
@
DLHDMG+Helvetica*1 [8 0 0 -8 0 0 ]msf
532.601 216.659 mo
(4)sh
388.386 206.905 mo
390.202 206.905 li
@
388.386 160.225 mo
390.202 160.225 li
@
388.386 113.61 mo
390.202 113.61 li
@
388.386 66.9956 mo
390.202 66.9956 li
@
388.386 20.3813 mo
390.202 20.3813 li
@
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
DLHDMG+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/minus <1C60D8A8C9B7C7F3ABB826E15B690A825D82678822A19F9ADCECD0A5
82> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DLHDMG+Helvetica /Encoding get
dup 35 /minus put
pop
%ADOEndSubsetFont
/DLHDMG+Helvetica*1 
[32{/.notdef}rp /space /degree /sigma /minus 4{/.notdef}rp /parenleft /parenright 
4{/.notdef}rp /period /.notdef /zero /one /two /three /four 
/five /six /.notdef /eight 4{/.notdef}rp /equal /greater 2{/.notdef}rp 
/A /B 3{/.notdef}rp /F 9{/.notdef}rp /P /.notdef /R 
/S 13{/.notdef}rp /a /.notdef /c /.notdef /e /f 
2{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n /o /p 
/.notdef /r /.notdef /t 3{/.notdef}rp /x 135{/.notdef}rp]
DLHDMG+Helvetica nf
DLHDMG+Helvetica*1 [10 0 0 -10 0 0 ]msf
443.071 230.515 mo
(R # FP \(!\))
[5.37988 2.12012 5.95996 2.12012 4.86914 5.32031 2.12012 2.83984 3.17969 0 ]xsh
grestore
gsave
388.386 20.3813 mo
534.888 20.3813 li
534.888 206.974 li
388.386 206.974 li
388.386 20.3813 li
cp
clp
2 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
388.386 191.839 mo
534.888 94.7759 li
false sop
0 0 0 rgb
@
1 lw
441.995 169.372 mo
441.995 152.018 li
.309804 .505882 .741176 rgb
@
438.969 152.018 mo
445.09 152.018 li
@
438.969 169.372 mo
445.09 169.372 li
@
407.018 187.533 mo
407.018 179.395 li
.45098 .733333 .34902 rgb
@
403.924 179.395 mo
410.045 179.395 li
@
403.924 187.533 mo
410.045 187.533 li
@
407.018 187.668 mo
407.018 179.731 li
.752941 .313726 .301961 rgb
@
403.991 179.731 mo
410.045 179.731 li
@
403.991 187.668 mo
410.045 187.668 li
@
443.341 176.637 mo
443.341 170.112 li
.501961 .392157 .635294 rgb
@
440.247 170.112 mo
446.368 170.112 li
@
440.247 176.637 mo
446.368 176.637 li
@
441.995 183.901 mo
441.995 167.152 li
.309804 .505882 .741176 rgb
@
438.969 167.152 mo
445.09 167.152 li
@
438.969 183.901 mo
445.09 183.901 li
@
407.018 188.946 mo
407.018 163.722 li
.45098 .733333 .34902 rgb
@
403.924 163.722 mo
410.045 163.722 li
@
403.924 188.946 mo
410.045 188.946 li
@
407.018 186.457 mo
407.018 148.991 li
.752941 .313726 .301961 rgb
@
403.991 148.991 mo
410.045 148.991 li
@
403.991 186.457 mo
410.045 186.457 li
@
443.341 149.596 mo
443.341 123.968 li
.501961 .392157 .635294 rgb
@
440.247 123.968 mo
446.368 123.968 li
@
440.247 149.596 mo
446.368 149.596 li
@
493.924 134.462 mo
493.924 91.6812 li
.309804 .505882 .741176 rgb
@
490.829 91.6812 mo
496.951 91.6812 li
@
490.829 134.462 mo
496.951 134.462 li
@
425.18 181.749 mo
425.18 165.605 li
.45098 .733333 .34902 rgb
@
422.086 165.605 mo
428.206 165.605 li
@
422.086 181.749 mo
428.206 181.749 li
@
425.314 184.843 mo
425.314 137.556 li
.752941 .313726 .301961 rgb
@
422.287 137.556 mo
428.341 137.556 li
@
422.287 184.843 mo
428.341 184.843 li
@
497.488 160.022 mo
497.488 141.054 li
.501961 .392157 .635294 rgb
@
494.395 141.054 mo
500.516 141.054 li
@
494.395 160.022 mo
500.516 160.022 li
@
493.924 176.166 mo
493.924 169.91 li
.309804 .505882 .741176 rgb
@
490.829 169.91 mo
496.951 169.91 li
@
490.829 176.166 mo
496.951 176.166 li
@
425.18 177.915 mo
425.18 141.054 li
.45098 .733333 .34902 rgb
@
422.086 141.054 mo
428.206 141.054 li
@
422.086 177.915 mo
428.206 177.915 li
@
425.314 177.915 mo
425.314 150.201 li
.752941 .313726 .301961 rgb
@
422.287 150.201 mo
428.341 150.201 li
@
422.287 177.915 mo
428.341 177.915 li
@
497.488 57.3096 mo
497.488 25.5605 li
.501961 .392157 .635294 rgb
@
494.395 25.5605 mo
500.516 25.5605 li
@
494.395 57.3096 mo
500.516 57.3096 li
@
grestore
gsave
0 232.063 mo
0 0 li
540 0 li
540 232.063 li
0 232.063 li
cp
clp
444.014 160.694 mo
444.014 161.81 443.109 162.713 441.995 162.713 cv
440.882 162.713 439.978 161.81 439.978 160.694 cv
439.978 159.581 440.882 158.677 441.995 158.677 cv
443.109 158.677 444.014 159.581 444.014 160.694 cv
false sop
1 1 1 rgb
f
1 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
444.014 160.694 mo
444.014 161.81 443.109 162.713 441.995 162.713 cv
440.882 162.713 439.978 161.81 439.978 160.694 cv
439.978 159.581 440.882 158.677 441.995 158.677 cv
443.109 158.677 444.014 159.581 444.014 160.694 cv
.309804 .505882 .741176 rgb
@
409.036 183.431 mo
409.036 184.545 408.132 185.448 407.018 185.448 cv
405.904 185.448 405 184.545 405 183.431 cv
405 182.315 405.904 181.412 407.018 181.412 cv
408.132 181.412 409.036 182.315 409.036 183.431 cv
1 1 1 rgb
f
409.036 183.431 mo
409.036 184.545 408.132 185.448 407.018 185.448 cv
405.904 185.448 405 184.545 405 183.431 cv
405 182.315 405.904 181.412 407.018 181.412 cv
408.132 181.412 409.036 182.315 409.036 183.431 cv
.45098 .733333 .34902 rgb
@
409.036 183.699 mo
409.036 184.813 408.132 185.717 407.018 185.717 cv
405.904 185.717 405 184.813 405 183.699 cv
405 182.586 405.904 181.682 407.018 181.682 cv
408.132 181.682 409.036 182.586 409.036 183.699 cv
1 1 1 rgb
f
409.036 183.699 mo
409.036 184.813 408.132 185.717 407.018 185.717 cv
405.904 185.717 405 184.813 405 183.699 cv
405 182.586 405.904 181.682 407.018 181.682 cv
408.132 181.682 409.036 182.586 409.036 183.699 cv
.752941 .313726 .301961 rgb
@
445.358 173.341 mo
445.358 174.455 444.455 175.358 443.341 175.358 cv
442.227 175.358 441.323 174.455 441.323 173.341 cv
441.323 172.227 442.227 171.323 443.341 171.323 cv
444.455 171.323 445.358 172.227 445.358 173.341 cv
1 1 1 rgb
f
445.358 173.341 mo
445.358 174.455 444.455 175.358 443.341 175.358 cv
442.227 175.358 441.323 174.455 441.323 173.341 cv
441.323 172.227 442.227 171.323 443.341 171.323 cv
444.455 171.323 445.358 172.227 445.358 173.341 cv
.501961 .392157 .635294 rgb
@
440.381 177.175 mo
443.609 177.175 li
443.609 173.946 li
440.381 173.946 li
440.381 177.175 li
cp
1 1 1 rgb
ef
440.381 177.175 mo
443.609 177.175 li
443.609 173.946 li
440.381 173.946 li
440.381 177.175 li
cp
.309804 .505882 .741176 rgb
@
405.403 177.982 mo
408.632 177.982 li
408.632 174.753 li
405.403 174.753 li
405.403 177.982 li
cp
1 1 1 rgb
ef
405.403 177.982 mo
408.632 177.982 li
408.632 174.753 li
405.403 174.753 li
405.403 177.982 li
cp
.45098 .733333 .34902 rgb
@
405.403 169.305 mo
408.632 169.305 li
408.632 166.076 li
405.403 166.076 li
405.403 169.305 li
cp
1 1 1 rgb
ef
405.403 169.305 mo
408.632 169.305 li
408.632 166.076 li
405.403 166.076 li
405.403 169.305 li
cp
.752941 .313726 .301961 rgb
@
441.727 138.363 mo
444.955 138.363 li
444.955 135.135 li
441.727 135.135 li
441.727 138.363 li
cp
1 1 1 rgb
ef
441.727 138.363 mo
444.955 138.363 li
444.955 135.135 li
441.727 135.135 li
441.727 138.363 li
cp
.501961 .392157 .635294 rgb
@
495.942 113.071 mo
495.942 114.186 495.038 115.089 493.924 115.089 cv
492.81 115.089 491.906 114.186 491.906 113.071 cv
491.906 111.958 492.81 111.054 493.924 111.054 cv
495.038 111.054 495.942 111.958 495.942 113.071 cv
.309804 .505882 .741176 rgb
f
495.942 113.071 mo
495.942 114.186 495.038 115.089 493.924 115.089 cv
492.81 115.089 491.906 114.186 491.906 113.071 cv
491.906 111.958 492.81 111.054 493.924 111.054 cv
495.038 111.054 495.942 111.958 495.942 113.071 cv
@
427.197 173.678 mo
427.197 174.791 426.293 175.695 425.18 175.695 cv
424.065 175.695 423.161 174.791 423.161 173.678 cv
423.161 172.563 424.065 171.659 425.18 171.659 cv
426.293 171.659 427.197 172.563 427.197 173.678 cv
.45098 .733333 .34902 rgb
f
427.197 173.678 mo
427.197 174.791 426.293 175.695 425.18 175.695 cv
424.065 175.695 423.161 174.791 423.161 173.678 cv
423.161 172.563 424.065 171.659 425.18 171.659 cv
426.293 171.659 427.197 172.563 427.197 173.678 cv
@
427.332 161.166 mo
427.332 162.28 426.428 163.185 425.314 163.185 cv
424.199 163.185 423.296 162.28 423.296 161.166 cv
423.296 160.052 424.199 159.148 425.314 159.148 cv
426.428 159.148 427.332 160.052 427.332 161.166 cv
.752941 .313726 .301961 rgb
f
427.332 161.166 mo
427.332 162.28 426.428 163.185 425.314 163.185 cv
424.199 163.185 423.296 162.28 423.296 161.166 cv
423.296 160.052 424.199 159.148 425.314 159.148 cv
426.428 159.148 427.332 160.052 427.332 161.166 cv
@
499.507 150.538 mo
499.507 151.652 498.604 152.556 497.488 152.556 cv
496.375 152.556 495.471 151.652 495.471 150.538 cv
495.471 149.424 496.375 148.521 497.488 148.521 cv
498.604 148.521 499.507 149.424 499.507 150.538 cv
.501961 .392157 .635294 rgb
f
499.507 150.538 mo
499.507 151.652 498.604 152.556 497.488 152.556 cv
496.375 152.556 495.471 151.652 495.471 150.538 cv
495.471 149.424 496.375 148.521 497.488 148.521 cv
498.604 148.521 499.507 149.424 499.507 150.538 cv
@
492.31 174.687 mo
495.538 174.687 li
495.538 171.458 li
492.31 171.458 li
492.31 174.687 li
cp
.309804 .505882 .741176 rgb
ef
492.31 174.687 mo
495.538 174.687 li
495.538 171.458 li
492.31 171.458 li
492.31 174.687 li
cp
@
423.565 161.099 mo
426.794 161.099 li
426.794 157.87 li
423.565 157.87 li
423.565 161.099 li
cp
.45098 .733333 .34902 rgb
ef
423.565 161.099 mo
426.794 161.099 li
426.794 157.87 li
423.565 157.87 li
423.565 161.099 li
cp
@
423.7 165.673 mo
426.929 165.673 li
426.929 162.444 li
423.7 162.444 li
423.7 165.673 li
cp
.752941 .313726 .301961 rgb
ef
423.7 165.673 mo
426.929 165.673 li
426.929 162.444 li
423.7 162.444 li
423.7 165.673 li
cp
@
495.874 43.0488 mo
499.103 43.0488 li
499.103 39.8203 li
495.874 39.8203 li
495.874 43.0488 li
cp
.501961 .392157 .635294 rgb
ef
495.874 43.0488 mo
499.103 43.0488 li
499.103 39.8203 li
495.874 39.8203 li
495.874 43.0488 li
cp
@
0 0 0 rgb
%ADOBeginSubsetFont: Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
DLHDMG+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/less <1C60D8A8C9B7C7F3FCFFFDB158B184D698E7C36FB55E741160F1ABFA7
51A15BEF16FBEFF6522AE75A61D37AA759E989DF0FC> |-
/C <1C60D8A8C9B7F7BFE242671C9E817400744FCB1930C8B6D982C0603B0F56
B2079EC8B4534AB9C74A497574D9EF71E8F51BC97EB8824D6E23EF8EFAA3DEBE
8D568C2956BA1E496299B0678E1779132A604465EA4ECC38726918FAF069884E
38826C83426FA3C94ADFC9002199C86D8D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
DLHDMG+Helvetica /Encoding get
dup 60 /less put
dup 67 /C put
pop
%ADOEndSubsetFont
/DLHDMG+Helvetica*1 
[32{/.notdef}rp /space /degree /sigma /minus 4{/.notdef}rp /parenleft /parenright 
4{/.notdef}rp /period /.notdef /zero /one /two /three /four 
/five /six /.notdef /eight 3{/.notdef}rp /less /equal /greater 
2{/.notdef}rp /A /B /C 2{/.notdef}rp /F 9{/.notdef}rp /P 
/.notdef /R /S 13{/.notdef}rp /a /.notdef /c /.notdef 
/e /f 2{/.notdef}rp /i 2{/.notdef}rp /l /.notdef /n 
/o /p /.notdef /r /.notdef /t 3{/.notdef}rp /x 
135{/.notdef}rp]
DLHDMG+Helvetica nf
DLHDMG+Helvetica*1 [14.5291 0 0 -14.5291 0 0 ]msf
370.089 16.21 mo
(C)sh
DLHDMG+Helvetica*1 [8.07175 0 0 -8.07175 0 0 ]msf
394.237 32.8921 mo
(R)sh
DLHDMG+Helvetica*1 [6.4574 0 0 -6.4574 0 0 ]msf
400.021 28.856 mo
(2)sh
DLHDMG+Helvetica*1 [8.07175 0 0 -8.07175 0 0 ]msf
403.587 32.8921 mo
( = )sh
411.82 32.8921 mo
(0.41)
[4.14063 1.66992 4.14063 0 ]xsh
394.237 42.1748 mo
(  p <)sh
408.774 42.1748 mo
( 0.05)sh
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/DLHDMG+Helvetica*1 uf
/DLHDMG+Helvetica uf
/Helvetica uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 15.0
%%AI8_CreatorVersion: 15.1.0
%%For: (post_000) ()
%%Title: (JOV-03249-2012-4cf005.eps)
%%CreationDate: 8/31/2012 10:34 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb!R&B6Wo-dkH)3n$V^.+GCGsD)rgH#2@X\"A#^1;aQHQqnB8s_ti[i`?!^#ZCeJ\pY'BrYb`5^BJ_L`Br&)Ar-UBfNFmh@r4a+N
%,3FcGXoo>\;2NrQ?Y=#J;1fYo7Da%@-qkpQW<<6O;2JsG)NDW)be1QVo!@GK0^nS,=I;nHJs^Nmrj6=@S+ZipBtI^Ha^kAm=+8Tc
%NjX#>q.pA[QMASZr,U;(CYq!NMoB5FpIr`VjnKWNRdf*;R'r>6Opi#f.7nsL=//@UFuA[V6H0a7UW:b8e>NTaZj&>qI[?XmBAL\0
%a5;Gkn\+K-]GJtbj;7[?jHiNT"G!%r/Sc'l=s>aT!r_;/C[ct=\.mZ?d<tZHQZ3B(`O%4U7>ZS++rlN'0q!Sa1)u@Q8Z?ZeT.VJX
%-'.g1(^nO-i2>_L>SIa0MM5MRn1$iG@c;FGPpB;d="Hsp+&Y\<BDB53r-oh"gHAl)(e>%Xk3.9p6N@+<^n9&U`bN?u&$sY]U7<j6
%0ahp^4anS>6Qim1)tF5TJlFt2'!8Sri0Q^%k*$P@:<&PsY^g&[[K#`J#"a6ZcW]p1eC[TdElFtf30?`3"s=,5BicdLFHJ#*-^Je8
%'VV0HeP?JPKEbl,=H]m%mm+Y=L!a9bb=!#H&=#p]4^Jgl4gi1kPUhGP&38^6k5Vgd^XR#6KB88ga^bB#/DR1c#U4ZFP]4!a5Vd!>
%&`b+#ElA]p'Pp\haNofZ0A@@G4I&NiIep5us(@1AOT>EU;>?PM^s@*@IMN:];]m2[p^,hIU[W+WMViFoWfF,+'!N52AHI=t@Yk4=
%Q:Ptb$oFN0A^Y9p-4TsJlKL,VQ;5>,n/M:Y`<lcNXAFFI$O-=&:k3+:%_h&76ipBO3*:^kE$a:Qggo1aN"`s[<TWsG\%k54(o.Og
%_IATZR9KLu&d:L.)+YJ>7't/(^m-'Kn.YeQ7);Y)$8W'BL.&jR6p(;J+%*U^<m4Lt!a#ko#!ZN6Ne>[=?:'XlSAr4[XFd(S.]+7#
%J=DU(L[h.Zb?ZD1_>dmt80e%cTQ!D1b4.Qmj5:_U%+6Qu1hI3"$u(Ben/!>]b5qO*)@mq+:KS%R#X<<A@WB6.`@ZU"AQ_9XQR,5k
%3o!-IHWU\4:Z`+`*YX&BO.1kYA(Yh2i?IhW=9]Bdb:"VI<QC?af8rJs$&`4pLGWJSi6(O&Q@T0jlEZYt,71[ej1pg1MmFrkZJ;.n
%A!+So+V,3rD__!+q_7InB$<BeGe%<pqJc%70c<1[Nre25pn-&\4A`:nj1`PB_B:i1%u[_SqJdNP>op]E30Tc,NWUisneb1L&QMo/
%8KR\BDp,doHNU]JAgaU]Z:&T5ggh9Y#)oUG,_>s2^QPTBV1025?`APF5A90:5P6]/#HGi)plYChs%=^/DtPd_QV-5oWK_ut-2jTQ
%r(?pGs5ikI\,$p@"4\7n5>qO@Ik6M-X+0Y(6MW"nH.[oA'DF0Z/cW\;+cTI&&;tU'$?22(d4(*L;XdnR!T*lYPDoF!9#`=X2GR+@
%p^MA->*Me$.Ci!45t05+0EOkapDbfD^GDND.)`*g&ME\d4sNYg2\#c+jH^C'km[ap6L5,KQ6$XJO:3>Ti-$PLioi%/%=A986N`iF
%NK`mPR+`f1K2M_#IlTn@Xq!Pt#1A?s"pcX<<D;m2"9DX/b=Q6@23#Y<@"TS7+la]aKtN:9-,`?5`;-eb$5NtH_[nOnU5"q19RoMm
%C`Ig3i?h\1)>"/hJDmsSL%LDA-n44!BkbHoVJ&S=]$c.ob'X&N^g`L<5pH^'$eRG-K(K_H<[s%kO0F8?.>?f8#!cA.Vc8O#[9\U-
%#0KnK,8d?]0eS;XKKsi-+b8Q'@E1\W%1/j\,tT=&!W$I!\:Qjbe'b-C&i7t<!7VDp6XdO9"Jaq-L+j6;&,AQQ1$9E:";JT5&MKfe
%'Vm)f2#'eMR%Zn\O%s9!b5`g]'HFN26aRL5/:s$q1%I7d-XotT&i$Ig,hh5',iZMcGR5a^pGJHR!/q%jO%Th<_f@@g4r'E>&fM9P
%/Ks$m6V4Y_P:US_)NIBkJP.Gl$NoFnIZ_cD6A21qK!1m/l^J3\-SUO5UcNYs;imeMJgcIB$j'(SC.\4=<2Red9B4EN^2loe`M;XJ
%ggS>R:qBC\FC[Y0]$sU@KrPth>_q!6JL48L'd.%s1h<>V<gjRS8BPo3O\Oe6Top7Z`r41r77@Gg2%C%D@iuqsOZG&%(b/*l)DCc/
%JQATIFXO.F*XN=1YnUkJ&4mr>VXd"tXB6NTWJelE/et3"af_ERhA9!ii<lY3,q7Un`;+upK-[/t7=c$h6;eGSj2un3CO7ok]nT8-
%"&1:=(c5Qhg.kf#+QmmY;oV-k<`2hB'!SUYPF+2>5l56:4WpS-Nm$bjK*^K"1pg]n8bk#O.cNQK7#F6+B^f]h;P<+u,P`GsOq\Q9
%MLeijl3(#,,Qt-P3jdV#WL/?r<r8H,,7F#]'rBB54<-o^W*D%l<Ks@)\>X^'L52F4TLh+&@^'l&N]<!tLMW37Ku@jk?r_bO;1MeG
%0sHDKaf9Lgoh6!B*N0I&!X''g+Hd&=F-J:Fr'qAc,-iogP-U2OIgV_"GR5n$F;=oR*AA7P/]hbh?YMX`2'0%[PWILGPDX\u<TP2_
%9dAocBSl>Z]%SF+\:bn&9lQ7Sa!ut";`1[.nL;TBamp_e&6&t!`+lX[VS,5^QNoAqNOo24R7'2I>RZJt;C$oHKbEQ[/5T:P>5gu<
%A0F[hrK**IMBfG/`/)Bla)[J<ZBuf>Ji%ROa\A+*&>qBtS!,h(MII5*iCVm1)Rh!6+pCPQ(b+]XL`hBuS!^c4mXKl9,aEqUn>*k!
%g'L_KRO4FR@$l%6/rgdF1_XB<hkB,YPX7Hp+fGBOBp-&**?:`^e<.f^+PoZ39&nt[d^!=/AYXfEPu1LL9!4+V!3mb7@+OP,j;V,K
%?uQN#krEnKK,TfK44\jd>ggMh8n0:!lLC5sR^qhb=/H)brt<Kf'(]o?8=J,DQsN(\<AuLIo3374P&GtCP55u!&NJU^:GB6aNHn!G
%QpE&sG/e'[Z54lg;W#UoO?d7o-TN2&7]@d`J&=]TFWuI&A6omAKfK?r#`Qbp889uE1_jKhR$ZVB\X?#YHD^dpVl*G)$<"W3o/Pq6
%!h%'Ci7&1]iF!BOCF#@fK2O/r5HM"]"(=L;m6P4^5(dC^$LguB,9&2Q5\!tsd?Q[bb7puj<95,Nq)5a?3ouYS*H5C3om[9KdVrjc
%X9V,Qdau?`$C<S;-#A#XbU<"5oN(pAhDP,jC2rmtgX0BUFQ@X'?h32i2OO!:F<WIOg4/]J$6N\X_V@RL#u-7O>N@%-a]o\-nC(\K
%5N=,Td6\fRoT<I,0]3-!%sT2\NeHh8g7Rm7N@]<_3Lm:kp8f'EG2'l]()a2C'*N[!pQq"'lQThY$l_A1nBcAf1`.h[Pc1PY"2F-&
%^sckJTCppt0Z$W5TB0b7j!.3jh;dIO'*'?tOQ+E(515oR-bLjf>\#r;H0L<5!Dk>Y,3#?Q"medu,2JM,n?_O)n08P0#kKc8la2A@
%^W8em,+"@4kDMP;9VL)$Vk_pY#-'&M#iP`]gRcXObK02!@`Zk>!a6TH'ml'W]*k)3fEsYgZC%^]:idpPQN*A2/&8O>>_jqd!m`C3
%g>1;BO%`V-1)5eAB>#q]IfumspI:>QOGq8.VUb_VR^U3'C4]WR9#6k/X0r#n^otZLUlTLd%n.;&VBRj[#69Y$(hl]_d[7eV69Pba
%LsTt6+>k=ZU?W=+<<c9%9m'L9=2q)Z(e%S+VQ?"jQc$lr63tBVEJ6HV:tJ[Fj#5GQHILDT3Ef,U7-`b7b/Ap+ci^HKTW.j^e9\qa
%>JmuOUkKV^5[leg1"+'tgG1p/:$ji.h,]'5&Ne]oUard(a45GDSQ@<D:qT\EKM.;DWK@D(81DFYG0DYW3A*L^gGIM]QqKl4HG._`
%,PV6p@tgtd0W(,<4Y*AS+8gGAR.3[qI.UKu`=%Rnb#_5@:&0b6('p)1aGLZ@46t2NEd>[tV6!U2=01:'lLTg8!\[fe?B5XCTYG"s
%Y*Q<O>CRF$[$$9-Hi^<mJCR:LH>XP_?0^`nZ2u\;_L/a>chd7.^O1-AhVeJ@ctNJZ^%9-cQ[Y8sHD#_&Y!u&Jg`A'F)aJD,[_TNE
%>>Q@="Fp=<YESekhk(9T'``^*cMlrRo7[CQncVLWl_uHeS,g<nZtF6lKjH13CEoM-n(N:p.Wk?O,HsEh/-+^,,uhm7_PVkGPp98q
%jj99b!1b_ld.'n!j7,Ja+IdkXSbZeA:)/<5-d$XgXTMaI<hJ>_$7g,[C<boTPnCNVoLeL]@>X=JCQKrubn,Dls'FW;2XieY%U0?3
%>r27&mhJ5+FWF%N(NJ7>U]-O1Cq[j'!tSpaIl-JB.S/m)S=<:jE3GJ+3G^A,@p"oCPZ6V]Tn_,JiD=3_HJYJn)S^q%F-_;&E"bd<
%3h-.^L46ZgODD0_?p`q_4los8n@CWK/ge7%SoE6=`rLRMdf,Ws5O__XI/<rjro51/f8]+`K5gLD^rlp7qV21gYh$HHqTBTSH5h;f
%U439kgVDY?f\?[REt3`WL//qlE&(0bTOm(M17^s)d20;Z$hr-^^^$.Z9Q*?#Bh\Wf.d.0J:H*LC>oS%Bd*mNtmlJbKD;5\W3:Qi1
%OE8F4@Wu,IIpQuOJoa!kW<&['N`d_I(YMY28HQZFL'*&(J)obmR.7-j#-$#@[PV]!pD&f45e2G17pX3-[dZe5n9e0HSbIAef,$'s
%J#?\gdGmSZ-O?IWnDSm<%AL_H+LM/M_&N`=VHe<N>[&m,P=e]T8/\X(Gn!!(J"Z'nYC3"1q"8i8&21iWCbDDoXtTZrHa6NV_\]%9
%_&4*C;E:^6UAj?UnZ2dqP]t!@ah0^tH]H`((Cg?o#jdMs-=5+,O[*NIr:1V#j+'sCnO!Z&r_+L&RGs/?UNU:e3uSu3HM[Yc6.fKm
%AH$bT(1>gFLVQ8<].7k]TDf5Jh`iTb)6jYL/SIMf3-6dPru9u&2!EiJT)ZEWZIo3'^HfO5&('CsACURm7ubQ!KIbL/gCkN`s"ipl
%LQ8rN.f$8Egf-*K-HK:u,C)Wt/iktd:G2LI+:r)aD'JD_cA(W!KVU".NfpBo7]QGIU?^(>KIWX9o(0C44e;B]p_Pg%^VjhSNlYG.
%oWN6\OH+/&=$i6D=b$G]?NQV)ImlGrr3G,\:=]FaPMWo+-TrnVi^i2gV/c1;)nn779jMKp*fT#?bXPl7=,'538^aG'AC([p91j0`
%"kT<\Mu;#"RJ.:+<A<6k(AKeIQ9EII"li^>+n3di/bE</H8@Ap86Nped1,>;1/1V2Tr*W61`VDcBjBY85+4&8.t&gu;)d"cFtt:^
%0kpZuBa\ER2\Xp;9GLHXT=!_i$j8r2Ru8L^!d[RT<P+dHl+B&k<&eGdk(aYi]/>d(\I;rKJMbWW'23$9K'EQCNq&/TERYk#7a"$@
%AUCEM>UW>YCTK<Y!Hb^-%rO.p$]j].80!4&65;E:Da4D@gAphk#a9["bVHc"FtMDU+ID)$\sf:jWaXu+,&LK.\hJn>(/:P`7MYB%
%dI-[dW2=EOD!Wlr0jbjB[3m2%JL>#-dp%dJd^,>5#dcur7k.efdAuBaeS)jK&u5J(,X2l8728/M6!7mIrbdWg[9+UoO2`d9Fcihe
%W^GcFN(R6>V6jem_A2i'4sBSB.j!:J-lUHN!%<mP;>-j,Z[$aW?S,Oc]T.kp&6GB.fS1>O*%H>&*Ni7PMJ&Za;I;!l!9f/0)]>C`
%95088L%\2F[.00E!K^V1MZ;_(f`Qe,belnfCC?=e%O/#+r6;iWr-t%c[PqBunYe/N1c*roCX33cp4.ACbng`9.@'/;_-*3/*mSCE
%X`ken/7%0]'9/fNEP$f+i-o>DP^,Qj*:!L:aNI$4WH=$);1X"PoNQo9Y1]Q*<LH<&-o,B:[]&GN.$[IOmBg"`&K^6b@*3S.fEbPG
%>:c@<>.#03eM]CYZ>9`ng?a<UWoIJc(c"EZ2OPhQAL;Q.d+kqBb,,@He:p5Ol'O7LaB#\1$POAVfJYGSaA$khgJeEQ4R;P;j[Oj3
%D4N$2S^1iW8>bFG]hpQD]Y/:6kh)M",TX35FgN1h*Uul^o'=NS"qEKZZ>[+&(oY\5a?e$RGi@<eJ9'Q[0&*_83f`Q[SSNFp)X\d)
%=;nTg=?H`tk]#1t.S4F3Co8(G[A&@`0eM`[3MD%Nj^d]NBbV4PB^?8gl78&)!EnL1hk2SUE1Q\jdgJ>p*[\dXAth)YbM6hfOj2K&
%^^B-+]JX[YZrhiGJ[U/f9=U<gFBEhq/?+K.eJ@OI7LNUo@2T!Y0"B#GY(TWRW[q[J4o^uf(3"D$RI.0])th\[-9ireQ[nkb]\B$n
%WI_"=!a(^?_l^4U7TWXf^'3QW&@K?^1%o<S'?UC9A7HAo>+a0K'KfJeiKFA_!9dGG6(i=D0(eq1$/8^Ig\FbIT%&'Mls8(?2_n^o
%<Kml9icRfoR[3N=/(W,TMMqr[Z0c(cf#etjW55.Jcb'nq*oKGWrf@nl&?>G7Z5-5<.gXoni3j+R!>NSL70a7DZ/<9@!Y5POGt<bL
%Y`5r0.s&_>*W[rqQ)eS&I\Aa:E5tachLXFp>T.n=cSU^`R.d"1T:F0V_<Dl_ciAjmG""-R7o;,%'@cc"+d4dG.mQg,O>KNrVb*%k
%K2CN@9]Qd9c+HeclK1^KGYs"gZiL0:V%ujuCo9q9<Xj'TDH__$d%k-Q(:hFf)_0DHRual"bf.!W\?"^.0(#0?\GXo?_po_\D&3A[
%=9r?JVJS,t@%eVO)p)h5oVBu'@mTM):GQci9XfQ3A,&6\YNP3KEA7OAc%>nMK`G_r.,d4MY-B_4V0$Q/it<hq-KEB/b%s4uW<5-m
%_Ga:e[W+Ve4;S31HO?Q8nhpf;YUh+fA#DTH=R^7@k+bh48b\:*gu(NTg"P6#=D0^`ki+Pe&ic8=_]mlM\>^&/37`J1[6e/-^9D<q
%J$od[-MlRR/L7J[$>iWrA7Bcbbh'dNCl.,r#S("L2N-N35A4h!h\N'(N,OQ]S_4aHOO3:"Qg;f6:f&.K"9!J(RPcZ$*RGZWY1XM+
%Z2ZGnH4Sei'qc-1H>Qgr9$A+-q5+e!*=#DthTF\%fSjZDJ&BV;?3K3/C=[O)/5Ym1Co2l4c$_*ACnn#u::49E=-s*9Y34g0`<I>W
%]A@ttB&,mRM-)N$ALN.d^&.19#N.1eH%2Uu4N\Wmn7VNYAhci_M;&M$E'8JWZh+aO)?t1AOY%.8SJ5.E")hU2WIh"rS5`\a+<Mse
%kNuIFS:el\W)b(*@3T;p.S'!8cnJ/FPY54a<EsXFBX`4)*T(R8>0n,$ABJ-p.#%1ho4GTrf>^X(/?c=KWF+QC`R/(j?%=Yn6=gAJ
%OVXC&@A8og_6trJ(-A;QZu)_1?s-`*0KNfHp)g5Ki9DlP8rm8!@8UUed"/+Mb.U5H):Z1s?-N#>2Lps=TQ,a.iI>BhYpd&B<Ym]@
%,+tKjp;2C(+r.J+16AX#B/#5$E,8tKNWtiICRnE+h7"@U<G;_;ERU$MbCU<:V\]R#d_,Bp3]mK8`_GOt:%$"jpB@_QFP;=[a(3^>
%!b4p)4WK\e'o7LZK&1e0<*Z=ebZ,<-Nt+*,[+mr][H.l*CKp5"\?=qj^7:51Q,kcQDBAea)r90">R:<(bZ5)opML>'Mmu&@JEOp*
%%:32%Yjd@"2/S$oX_(!,NYEH)iil`nXp;/S$f^+/-BCd&#Y_p/m!21OGL9Hh6GE_[9BXKlD.H4:Zoe42lX#!YLmEs'Knn[Qb37[F
%^\m/Q(]&O2,Y$:"s39HZCjTLFNZli78X"q$de].%>!R-gs%d@)G_!o35/pNhG?jeElpB*r=ZVQ'7rm74DALCV<1Mp@\jUIHf6,DD
%+T$9F]kBV8.oB)*Pg9ZTkqFo\\LX13kjoQZmBCi(GUThRP>(D<G]a\3cIC^a2`Y<s9l_e-P<'puYnM^#R3-#P,YiCsTAfBH2Rj<>
%@[2fN1qAO5>EDKXQMEi2^6Zs^ph!rVH.?KC@IIS5=0;2u&1/:_/<bH5/t&>mI-`^)Uo3gQ#^Em"#-JRd.uoIW5378@hC!i.knB>B
%.C@Q7\t=A_Is\(tL%(ip<c,Ck7kQmc5&qMq4:O!\ZPDXRpA+auiYV@f<F7KZO/HN;P++RHqYB*U0MK3D3f\T7QnDP=c"4)l:DaXV
%Zrm)CI*TPecS&5bQ/274lK=CLL/)?j&^Tk$$D9ujp]=a0)o)+^L9[q?/:A<,"S0%<mm+&6IGbJ1lMTqPE\b;kG2$O%D%pCT[38"6
%&s7?8(nH+g7\>rPIWBW!%1.U['jYU$IN\akgdPe1:2IXhr5d9lY'1eo]X`hDVsftIA25A&UU8B"PC[_.<'YVpMYIH:Qh9jjV^Ts9
%N!b\*k[a8HdME8]q+:-pMJ7=7S`L4?m)]n[9ZLSm,ZB.bS6R?Jo?T\qZ1jQX3[Z!Tma^Y4OE?aI5CqY]Q?Z$WcQK9knmd.n,RN[E
%Y==Tq-T=_pSb6si^oII_,iFSV"9fM@BSarR3JMtcY.1S*/c3IeEVVq_rPm3_(TIlhpmDCm?*Q\Q\K5!JJ=\C"(VQHq:Xkk+MZLJ:
%4t`T2V=G@t#p3mq8Ddt\QJuE<=koQ\^(@mo?G):E?5#P/]#FRMR!tk-bI60^dsRn]E1aj+H[_XRL&;t?DiT9f^E4><)GNEhde^fh
%I80??fe5,MR#aDZFcQ9CqC7GQ&s8+OoPD;XqWB-^iRN--g$$[\KW4,&ZqAqck>dQ4pSsTB19^3ZJ0M4&K^T#pO6p:JdT%LAc<[fC
%a)nAf>ceZP@'54tEb@KBDAcCeN1bItY0jJW]s@b4S\8V@mQD@TEfg7FEX\%lo3`\*:Oa;[9@$j[kK9?H`TMOqXq73J2-O$\C.8!"
%66`t^"r8$4S?H9/dmUY;9)27IZa_<-N[.Yb1sbt[$\)TPBT1V0/^13b$HBp**%@@(gOk*H"/BYs!Q:Q($\KTQ-82q@%6F;W4W4.U
%Xu(FR!C&3BTjT6beh-,@?\J_DdB/mE!%=>;1m>,VN6U(7MJC9K?]ogkGZ]irMQrXnnQF^grk$8Ua2D>a^fBnD-J>Dp!P5jjNb.4l
%Hm2O>7(Oa>Q6(Ya.hh_bSEGBf]kMpNH^rQeiU\LK;%4oR(2Rr=96$P"nr7PZLL*gE_imk!C-tR8qO,(,PQ:*A&$\`;+.l337L'd1
%+0?rX)dGQoIK.Q6@`'SiiN+QpbB`;@lYVg]R=qk:];]rSU/;<B.mu9[p+8a=[Rg6OWrBDGhU\t9fG9J3-Ag$*oj.P\WKtTo((.Ee
%R2g_]o$+QDWUIVk=mQ7hh*$VXajoI3DLPXodb?VWS]d<+@8Q%^&a4k9-VqIZ^?F^Z'iX"a_GI.]-e"U4c$42oBa8D6-$roNb`^(_
%qh1n!hf;-82eBfq02GQh*f[p7?7s^bg[c/)f$8!%Ob5cr!RYS=[\]Emhk2+DquP^QkrW-AW\.esJ2">6#Kg=2^pbBi(Qf%X,W&*q
%@4<cNKP&@D@;)+5e>S=QN78j&-J1?^"Z-:S_3?.*YZ^sQ'0h\R+hA4'=P_%EV9qc6[B.:e!"W$"G-.`M=k9pPeAF0=Gb_\%7/22&
%3LQ#_HOUWB94,BA16bR<AM-BGmk+/1h6o*J4e\UDgdRW<TW(ib[k!kH3f`-=l;&rf8:2QFogW%\j.olj%JZD$;L5D@$"X53NJ2W0
%aMt9mVPQqNQZ[bN(C6!<^G*3S))=]=<5ZSMHpn+2Tj$HLatt@%TTXt)JY@"BB!c$!hl_''+Zt_Vq$N0%[EJ2JMqJ>$ipqU;Aj]$+
%RBRSL#?jtn\:16fJH`JnpI:iB>^sc3Bd?F;IC0\/O+Y;E_MGcl+rE*FNG44)T;]rj&4qrp9WRnnmh;;AXiK^cbB`n!Qj<74Xo1f>
%1LN?N2=CA(-,[:>_pGIsHmb,@4b1m.n7S,.mcie@:`+V0jk0"rf7Rq0`lElgn#WEK>$iQEKVghM[\f\eTVaJsOT-6rKQh#-]5$t[
%o.f5MpZV:H$c?!)Q)Rf6o3.=J?Td/31%efC;s6L0G*8>XH8GXZ[E.,9PHSfdS!tAS7ZRFc@&!M-@(X6U,bG??+jJN"b]a7"J'O?Z
%QO>fMPuV#LNT?YDVs9`(S^t+Io2dmP:/ABF+1lB*!1m\n>%etfBtVp!@F0Q,^3oj$T?3"DR1"&.p7/cTR(:<+TH^<X80"4'lXn51
%@s&!>RY6BXe.3(&A'&S6Y2k_#X0P>$ombf9"3n=:)-?'nWTFk#JAL-bhrikAoCll>9B7Q9Pp2VQ@?l#9Ju&Dr;%5>CT4D0f*1V7=
%k"/iDcUu="8ZbG5+0%Tm_(`h`Wj]i\c@K,EPt7Dqj.Md3,R/1#DK(7=)O@6*lV6L,9Q>I"K5l(,L#J(Fp_I*M(WW(g3cG\Ce\eLl
%b[Ie`8_FgBjs1`CeH`j"[rG]OEY%TF1nAKSo713.fS8;aof>8c%,]kYd,M5^=Tgq*JD`-2!r;@\!)-A[qCuQSADk,Z1I%`hh<GA:
%k(ucM3[%m4<HL%]7%VT-mpQAlP5G/:5N18J$4]ks/3Q^9q$N]_hGVI5XcgH6bM?%pQg(X%eCD_[I=L"!KMupe`R@U^@e8AB,fct2
%*Dp$o-Uk;c$O5,On2+N;1hqP1O\@AT#fDF"k2tnH@CRG_0>?BJYX%j0KsCo-I??2EA#h^X"s67BXrlLal1@D%UqCB[I`!BKcdp`V
%:,oD@\9!-R##s1fQiI;:1LR@(*;AQ=%jA(&>dj5ab<=Yd4IKWN3<IbcrI`$oUT<!5*Mj<G&^J-;8R%N#2g^7:.O/($c.OeJ'!qn3
%6klu\1m4VKSC2j'CK^dp0pjQ<qh:.l8tbZ@kRBKdlu0]?dQo]T"8CX]N4D'0UL^W+SY./E1?H6(>/:/Y\"p&XA.SFrAbELPoVUlG
%/:tTG0V,s*QpU$?)lM'<I20a&!uu0)\r::sD\"M+WcT'!:VmPR!,^#C0*9L.S@9$.&,,>\ljYe$i6M;`5CJCq)_08@FE$73$nro3
%L,N_\Fs=+7]k;uipD]R\9.%;0J.>QLl"8>mgN-UVR>nL7qcWB8!KZ=DlCP_^m08Aj3p')m"',,\_Z#+>5C/L9?9`\%noXMiO$>g`
%l21(a!SqDmi6g#mZf4J15:1`/eq(XAjtaf<heM?$")4DP5Z_TfB$F,Z4JtpAlbrD3oE!/+PLO<.WVHBTjRT6Q!4`nuZS@Q#o^PBM
%ZoKtZ)?XTZ+gQ[j6sj`u@"0cBnt3J5e)aIn>m&nFE$pr/%SdB&nQ%WFHfoMbjgS]"Jt\Q:'\C%ol1ZtYn,3^bon#$@]Tg^dLsqWI
%#6:3NO87PB?)bm9jDFXcDCBPAJ,726mZtC(>`@=nr07D"1/?9B3;6:?0$h58glJ1Gen"#5"LdE(Lu"Qd`,i2&>Bme=#`,k]+h6E[
%9E!TF4e;K#\;_+L+q-I/"HU8alR+%X&-`6ERRg\(^SNJ;WPqjB=mF)S'0"BYIa8Csj3ouLmoZ-P?'XSbJqWt)b$KMQ?)2E8&X';0
%fP9gu^X0RR;VSLkS.J;rTSCb>acG:1dnbH`fN3Od0sEM5,C!G.(\iBOkJR-VA=?h8'JBglHrldJRWVoeLs"7Z,&/GNkqUGkk[_8U
%r5gUhIkO,5NO=MjhU2^3TK`Wc+ZF)!:+s^ESW8YCo-3i&:[YJfDKArmWG)jhb9t?@bS*4^V&$oa$>#[!@4D4:l7X8QG=/:8@fK47
%-!Qnp9ESA<@L:bXhq*c&V730aCU,,mn_XEdq=3MeqlQ+fpf4&o@`"+2.$qLC)/D?YnBjiJF0gJ*FJFfL?^cR>&c!l[LUo,-:*N()
%o35fc+4G8+<*qAV:JkYS*KJD@:X:)47)&T]VtI+c]$T4S"*6AL71RfNklXO2Fp<?(<eT_H">CoCqGYX8/;kV-`A>eFbm>bi9;Xoi
%_Bs;m#'P+HLPnOG>bQWf<JQ]!^O[Fn&r(>0lc#DYs,7454ruJuX"tgl*U*]egiacH70W)_k:?:uhurZmC5Z_Zc[N`f`%%G*&X?q%
%kdf$3M@14r^f`/dcuh)c"gdabE@uUG37/4.ffK8mH4^T2#r24D\9`t9F?EO9LFRp56%_e'VLEPbbLB''F0un?NR%Ui:tT^'0/&l4
%hJf,0?LI#;h=k'F!SjlUXC1gR;ah*M2h<B]XY#Ugd?)mM^XP2C"$h^t'2($L>;M_@Y.8m%>2KJ;I1bI4Y-dth$O>kAd7[k]._asj
%B_bMK3<GP4f8>;K^^PYP-ct-mRV>;#U'\=bOZZu:e^;HkqH6+X<?&!K.J\huA?ttgbk!]TVD70Q[R4T=>5qn1RD:K>8XkKN)CKL/
%LS,UXg6)cnIs\I'2-q`Vf%D!q`kut\'-CVZitaU4eL2:uOP`s2L8NE9rMdg>B(nLreO;7`$>tCnB#CRb+W;:ij5Pn)e@bmu_p=EM
%\Z6Z'*il1=2&A/<%F?NUT5rTkkLVcY7VGN^!=6a:DrI!VIj5%/\.W/tWhP0H'2iu;]D'(U)9cr.FHXa<^91^uqjKnc5[bud\`E@4
%V,Kg&#oD#WS?EQO/<CB@nUf)3VL[rd?]4dGGDb0KUnP!(]O#``kYu1Lcr^RLIUDQu-/\pOM2V@j(Q=5rIa1><23]t1,WRR$nOoaK
%^_q'2>]'Op]t%nN2N)PVc&<5^i%3gkaNtS(S<W@Lh$iF2h[IeC3]'Asg$\/#Mb\uCa3[g[(k`=MV\u+fNI/@Wj28oI.X>;J'o$Y?
%@lOWRc=QI>T1lY]4]^.)NRa\o`jIsGmc*7-GbiIY!'pd<]0PVqNe&)90BgD$rhNK7mH:#'Im.JEPphanPPi9k]?6TCmTu*ZY8'1n
%";EFm14si23#c,9NtPO/k:DuISc<_5Xt'gTU8ntc-*&CbVhrilj3A=JbU&;fZl&nOjJ.fQp?#NAW\7+36Y]"Ge*D-\)6/+6Q_/rP
%<q6"YGm=+WR9/Eu\B+&MB>o:KXG1[!LDN[V6F1&ML,q]Vi<23B)#$Qc&paVms59YbSUma'3??1:C5T*eB&A=QmN_4:5?EAj05!Ph
%h65>;P,(7gXbUF[ARBbRql'VUVbalX-fjpo'<kUI6DTJ)m6VIW7Jt;TZRt<e'^94^0@`1U$C2htcNmF$7]kYt=`Ig:+Na:dJWH)b
%de.>]Y.G0M+=ARCS*l>gXl/(hg/%;^35pl]5A(t*Sr_OMkMZNi4eW[Uo&#:ZqV.(,Chhb;-#h/E]U6%]KKl'CnbYhu=nt73-LA`+
%p-%mKDE';2lI/fmoTC-R@o(L67Kc2Q_#`A$`:Loc[=*H0B$`^qqoY(JKF3t89/pfMRIMTp0mYk-LmnGO:&fbRRTdO`hA:pW?AL%+
%$;UjbJ=u>f:H2]=O02ZtHO\7X/C6i4'8hee_)Z8#mBkNUW[;ke?_K8QlCgbX*)(WPU[SY[8OnW/5!G0=gYY4]H?S\ij1]p`'H@hU
%9Z>g8e-=(2^HO<nohm#sH%+rWC3WME*J)!tHD<gB!&=-GquFXH2U7r9S:!<M[1lDd"k];0)N;Bq&<*HOaEFaZ!7ZX6ELM>ahbMXQ
%-TI:oD(EGiIe]+E%D,9cb5_3.h$U+<>K<C8^$tH"l&H()PO]%=?K4$uB?]bmJhYC4>heX)e*]f:h*^B[8PkVVW8.U@oQ2)%m%5jb
%o?B1$DNu*SWO@)h^-tHtFP7Npi<SMVc^&c7(C#'-h0^tUZJR3rW14q@A@h^VDD4L25Y2TY0V<sRr6JUb2`)J?m@%@3)oW1uPHBY$
%^X+f__kqZAo`.GlmJej6!#J-'OmS03\ZWlQnuOoUm>$1Nq`D&7^N&SMA_!6\$U&)s0rfFRT?Xu8:lR-,HaTn!jW'SRl/$/lD.`d>
%)*WJZ$kmOBc<Ns;1Z-*`N`lTpQ<1a7!):r0WYU<^*t?'\X1%/<.#P=W#te2:Ra!ddRoeI(>%qYPZoPB[9eDEB>Djub1tS<rL>(s`
%ZDf>riC.sEH)J?W[K#_go#Q"7TV^^NCnE^:"-rHCiNYYh*br^$n#\\Q\cV$1!7PoF,XN_71oT?3AcQeD]te9MNHj45)As/[m`9<=
%$dk6BNKb)08DE[i>]h1TkHe_%g'e5UPnQH"nfA3fd*`mfB3u#q@o.QX:iimF6bl5/]Y//BjBYY)U^OOJnksT.B?8D(@f()rA*o[W
%gTs_9]@nHVXEmD-;12m)K8;dE:HbpHo9F(lg]\KJTfh`uKGoI^ZpuosW.kLRcioL[<G-j^Y2pXTkjkkg3e='nR^E+1@fZUA^cGoq
%/?ZQOfY$d66)fVh(lW;9"C_O<2t*g28"scV)oK:H_Tj\O!8SAZM[eo-RnjULc&b"@hk5ON_pZA(gKSR[2PND_a17WR#CVVQBj05s
%!%aQT6d:gXWuOsa>de9.humsgJ;/L^%;'nbWfDgjocqrG&PYb=E!i64%Ql5bM3Wc-csH:FiG.)7[7?DihQ*'tfYX;N<heRm9dAje
%?@.."F2,OG*a$a=`h!DP"gDDF3i+-]VXORm]C[hg/<FkL71jJ/\ti&9$O(?nffj+L2.e8K*O\:UN7MUAV/^1NEa=Y5H/^boHKm1@
%[OSC?(1904Smp<ET\+GLjnb3AEs8&lp+M4&?OI'6b`Q8LH[*@7m3D5@\%l#A3uPPWlpQY#i$K;N*\O5W)\pQQB;3P,HfZ2mE=om%
%/b;Y#>o]2+)OG<NFEXLnV#m!C`6dmu4$RimDk:;9)L%hn^2jN.Y2BfNZ>Lk,q;OcOipMEu4sj1e%;6&(Na:8OYG1hl1mN;[9OH2E
%&JS\Oh\)b=^*!\_m9+H"ps[?7hqZ\&E6c92(Ah&jIZBZVf.(&u>Sjp$FmM+)=_:*!]eUm+hff5-CE5>Kd7*h+;_ViO..iGdDS#i#
%HJl)Flpmqa-40f#[bZL9?Nj;*r4R.JH:6C+C0j-96`CXU%M!tlmSNm/Fo^O)h(Yr4OLD_$KQQMtcYR]0N%]*ibU`G?"=+Rak+g5G
%e)/C]NJZtH?5Nk36L)Y8QP_&*58S5q"CmU(%#eX.Olp`4=:4bpnD8VPKql'*.WAC0HW3>K&M[:]<\N>Nn?Y*::oeOg`+S&HceK(o
%=;,c8#c1WqoRY/9f@VgC3<qF`RAMbOerPRh@u3'l*ut_i=Q/ZpiT#.XTH_rq/T_VbG).om.]/e./$,RLqMZJr=Q-d;+O2$T7.9Af
%@>7caI>:UHS^YTj)-2>6Y-SmG'/8P01j.2AS!+e<Gpg+&rn`mj@r@DhX,h-:VHAa(o9tOOp5L,u[o/.?=>BV;GjeNFLt08ciT$j"
%=a]H;eRES%<n''rdjkapS_%Z@g/ok.S04oo3Se-:=?hJ"a%jMRCZ[/Hcl5@a<e/3B[@a/DXX2P/Uu1g5A'MU`JsZk#Alo'P0m/i\
%N'.\e5r3OMn'qe[JMfX`Hh2X4*,Fp&L#CCt/]*Ajc.KFVjCr*re]k<2grBY4JMhFf2P/_=bcnsu!JoJu1&1]\b2hS,6$mlao#2$<
%YWN4u93>Of5/Z<h^5ZF4,HLkSahEfr*P&@VU6Z4M&F9-1ee136LMV!>Up]pig,?hU\$ePBPN*_YM90&Daq-Mp+),etjkic"8%<E'
%@VoFrUBiBUSjm`6-WRku,qQ:7Ko"lXs4A<,[D^t:^&!-]XCrs]7/Z8>%4mm:3,&lk-#IIM[7ED\(Kkg\[HQ9GQcm72),kPt(R8K'
%XH-`-j/!LA3q7;tAIMZa)N=IRMZ*Cas7e:eqGA?$/[>;f`-\!Xf(TmK+\kAFXI52tqm2[@e#B8peus+-Ar0MICBiPuX9aeBC**_)
%1p*-S:#1Pah78RX$a=5lNItm:Q2HfLG+sH'i:4S5g?7*a.o%M]Q*6u2[mkb;B5!)Y\7U$#IXXFjjf8Qh?4(KADXP'"YV**]#V/@h
%Om<4khiG&)?c]NZ0*VUMiQ;V7L=asS3@*'W=;nCJ/kX0'I24'A-EA;B?48Gq\).I,oJBLFlEQof6G#%+=:$4S!mT&R(^$iS2o5pH
%R];A-5FK0;200it0_ot=J%)Yqj4doII@Eh>T$M]%nh!,uE_fFPXU5Jff6Og1Hj^WCj0<h:3l)IXSB7dpi.(NtTg0ejI`X/Xa!p''
%g$ndinnms#S9['+eVQPK3cBCM<_j1ZT3f^M2!'#M>.t/RC4Y%qAQb\WWV8%shq!k#SW^tH<68(]5)9QpqVL,:U&%,aFRb!apW;HS
%nSP2PS6<RSA-0(:WP$b9mHL\cEEcInH=o""Q>aOa5*Mn1DZQ<!jkZYA=^_.ujmOeY:<2/?Vq#!:_#6],A_MH]$5L1![]J>VFdb1g
%[iW#Vr-iP$1_37:FEl!o($bX_[!GBWWDe;di[l(?"FGDH';"`"(^^CLpYrUQ[Lg_&hR:.VkHrdoiVD`Gj<l1LR2!/[c.05PA&3mV
%.?'kT#7@0r!n$VR'dQNII5]JJhRKc!@9R91GYlR^+DTqg4&eedi!Ch,#fC;F4305cnDahR^%A9ZJ&f]$6J-2:AL/fG;r5^0OQ*9u
%jI+S2>b+9rBV((D6X]J^)-)fgeBA:IS'NTA)$1*@=U!bUA9?Mp"$LkP_T>WqkR2&9#I;k;h?%KPjQ'`(Gr*JZH[3$;$=3=7mYB<F
%$nYM3leaTPYsK,X[DLWrYt?XhWJVPFrHqOr[HI(MW*%$&+l?,#7L^?OqE:B!Zkb#=<pZj`?aSnZYQ?.Y;O1G4eA;9&iWROW4uL5V
%M\qWS@>P_<=H$BmL%>X-XKnl:V\VWUEhV;"gL740/[6KI7I(<uab>199@pS!>/lW;8Y+fn]_834aoO?ucdd-GZ"W.XpQL$.D_)\H
%9%#*ONBEm1SX*:=g*$Cg9d,--R]tT_[h9rLj([Wa@it+d%B:LO$X^(`"X8JCP38E<$\*>nJFk!%=6\/t%r0$_](j8F-.ZZOlDQ>T
%"S#j(B@9<>AhILWc8AROqTode&YST5JP55/N^sE;,=A%_;a)+'B3ZP.",.VKVPk,dPg+F6>&NuM*VelM$>=Q71C2;4,iu,$iQe4]
%TpG@>-%:#l5+l"AalCC<=lXU,gCK#sIBC.IJo?7*pR3M2YoQ1[&YMFKV`n/Wl6aNg&#oALl>Aq^f53u#@[`<JoO6=1\ispODskLV
%Ku.n6dL8NQd/n4UK+5ScpYd)dE?,=bL0ljcaRf<?B*J^"^dbT\n`qC[<5)>jdP=NE?cDcsXgi;oHJgEhao]78pSn(+\mid-Q"_$3
%dVC$+\eb-Qopm$ZlWf*TF-!QoAO4L,V9q=FHE\0j*1ie(_ISQ?"kb$tOP#=U[Hm1+$+\<F\GbnbnNTt3?B2K=:(!uc`T*/A?9bl9
%m+Dj>K0?I#%?$N+!L59iV!7.'n%p,;"P.+T"_\t?:._`l2F)l0D"1ZW#\?,5`VnQ[!Ng]\/@m=@+PWgNP2m,@_]-JHE"D,_9-cM%
%JOTYcF(h?OBU5<a5jJX4q>()-Et/DIrTKFKRVX'1YA?;mKFC&+629sccn&.taTeuc5.54i;V?WLod]k>]rFQ:f*):R#Z[UQJCO%Q
%2W9B>^-MR?=Yt!M<O!cPOdRHhj[3S'44A<[l4_F<n0YBr/\U-jUZY;Y+_o"GdF(qGH]nYj"?t,cd`bB*Te+sc3k5OL;VK9mZIT)j
%U0_W)nEX\hg1$O0/[$\Uf!F4p>-u]/_el]&oFrn8d$Td@VtSue`Yj?1)eWflhSp=Z=M1+I:g/G,"'TbXh_;PYjW'`G^hhCPrIUgJ
%mDXO;ZON=c[s&slI0k[>RU3UCca8C,gqJuhg?a!.AZ_"E4_M1-ar1:o;9:M#[.SQ9D)RZ/*kF;p1l_6H5!51`a+kV*q<-YamAA?W
%@<en595q;9-HA/kB$e`+a6DAIofA'@\e5`N]eSAOmP1#,ojBRn2L!]:BK6GWZp]&09H1<(+#n"ldHfSI/K5D>RB-Q+Rh`03=b@?G
%H,"2NH,N@NC2CPVgR1BVLn1b^LD'A_L9f-CJ\aJHJOI;oRRTQD22T:;.9lWmGZ*b<=g1UJgT(Co1m>3=YroA%e4s"0)6&5TiW@[F
%HL3/7!puBFZ30&>ntC'pFclrBpaO+G`MZ("a=KpV6S+s?WS![L1F%gW3uA%:VunIPBUnV9d9nonQYm*?o4uOcY2^<V(c),dVs/1h
%^ZYiM</cIcFE5)U('TBcfO6JQ0'H+d#',^JYmBEZ##hB6]mjrTFl"+Z"iT@#Kt$ZT:%]M?GFc:ZE=`Dl9XBP/>a(G<hGWeR#Q_g3
%MaY?1HJuNO$s%O78-HtmD-RTo'jP@"fdB=Dlj_mtVWa[=.9ON3+G1<P"BqQ7F<Lt(S"3b$h/"2BVX[.Z?ImKsT!lN#WmT(7a?H_u
%L0CrM,+Ji]U=ToIY::<6#ARJl=B3&qIE#"DhS68(=-5@.?K^`bCs_B7eS#4_8A].XG%"5r6)kgX;&''fTXW5+LZ$FDFaRQE!X@[t
%jlQUK)(aYl]-OqtMP$b)IW3!DX5+HkklT2$8;,[[>73Y05`<L>UZE7j5;s&6:Le=O>ft"39VSn++^00HfL9Kt1hWT1<^XdpZhG(;
%l8_KVBNQ_=#Y725FPIkl$9JI!mngr!i/CTgU=[cH!8>R,,,SMq64?Std(#WL<>R[bf%q@5aq440Vk"!uU%TVP'9\tg=Df1@%a5H"
%(_tnVV9kBp5Q&&:DT[tgVIjZdYLROMfY=<>`,T08mAB"XXKqor-MP-UG'cL.9g?VQ?+W8PCH$&mSZY7EBKKoe_sf3@c4?T(5gL=T
%gQ#G;!8:&W=[Y8(T`)8;KQ;TC>Qi,[3@U?i+W3W:[*+qpBd?C0Bm0)am0]YWj+<XFD'bD?3eBrN>#ZM+gLD[6Df>L/?W35sNQ5'"
%_nBs;OkSalG"NQ9HZV@"\B6;(Q."K;6\WX\IRN59fqdA7pAsV@_hKU5A[<9$7`XC!MI\jr5l:#M5Z$%0h51SURfVd*n2H-!/XIXm
%Zos&s\m7[baFMZ%JnLbt]mlfU[Z;Berfb4^-O7I@8Z+SQO&&NaIl$+uN8-a5H[>^*;:T%oG;F$=kI-7u=d_,QBLhOK#R)-eIE`Z3
%V"aj?GM?s;jM3t5)b5mnH2l^@5->jF0?oZd"q>gimoCfmrf#15b=cJ2F^)3%XW<`,_3\QY/R!#rSLi__5OTHM2I.O-d.S=>`eN^_
%\QS^D<qGUEk/\4%=)i)T9V=bjN^g\+12HulcGta;dW_p*cd4!pYttUMo/JO"j1lcFXdQ.TfX/W+EG-jq7HL.gQ9,(@\&R+@"[Lfj
%BAD9!aKSG*Lkj^<$UL2^rMY.NeNSE^/UD_?XW8[S!go;/cL8!ik_K@&s8:th*e9qe%/UjqS\EGke4Ra#B#-Ac'FX:Ndhuj^LfFP$
%'u-0):->>$^dlKTgnEF"QTP!;agsi]oFkj+Z%cLIJEAQMI.k*uOICfto@`<t+\=a`3hLgQ*u'9YV"<:&nmQldJ94!P>X!]#0^3uN
%=LG\e8*d.4];>,PkOLoR%[,+ML/lL[P?j3^e+r?Oq(S6>V"4b+F864XO58:\9X8=g\U5;[D0%b1D?I7?VV@Z.1O.oKG2?FN,O'i,
%)qng9+D*P#'gHo.[)EnqdQ;B[AW2YS^.m>cLu0&_#N3,helE+q@mFdA<aD5r67[u0g3W^/a6+]sNW7rZ2oSu0.tr/nm!!_lUeo08
%fpp"DQpO05b@KBfB7+6j2HaZ]^h27)]'S-]8D]OtWa"WS3Dqr?]"^Y$8ahn`[<0!p7%G#qCbaTmgh[jDQF=W7#7,7]KMF(Tdr":$
%R!,CbE4JCc;'XG\j7e?dCXVWEQ@6uS;4H#%XJam?N*0)MXR-degbuJQ<m@C9I=WuDkr3jLlRP.>l??_^VDJ2$k+'_U24OHD-HD[U
%kuQ'2P$Sk4h*/PmQijlZcj'8V=;X!lBt@E9UKHP9[4k!J5hu\*#2Pgd]o$FiQkC5n-DO-g!pb6@NUGFW3JFLS'4-XPUV3"bNVPL\
%\epcVNgt5)Nhr4^[I`7%3BXS;'6Anud1(N6H0;m$D$dnM53cjNOmb9-0I:PXaftiB1//;H+??J.'O!H#:Q3s2R]YLdb;=WLG$h+`
%9O)_s0VmOu@%'8c9]_mR6MaDU-$;<LO]=`91H0M0<4kC*6XsH.2qt1sRHP)1!9<+!M3udOoh!#]Dqf8<ZC_YBp=q]r%h;3lkCY)]
%N_n.:J75K/ls\g_0\^YR&2e3HDp6qiZ'V7G1uWOSA3N+`ZCM(LY`U.Wo/q*Y[pTGIMV+/ulY'c?+Na2%(3PtDIKF-A@:mHc'ETA_
%[-.;5?Nq%i8t^[V>K)1&F"+3nAY#l7Y(3V&ZBdr^^U'P5FtiX?JM1_NCK>9g$aNA>1YJ;*1TQ8]+UNG^ku8/$N8DWmP+s#nAl7;N
%8o34WN,#8&c%]4Q#AqmAjP)P-X6>PG9l$YcK\)tXe&jtN2u(1ISJ$U_b(d!hg<U_#Z>l6SFIEM_G)Y:Z`<@ag7rJA-TA>fq/b7l/
%N8>PBV_7BZ]n+:ECItfnjpK+u7W4<g1\*'i#sqj,#>L<k]j$)MBkm!WCJ!_1kpg_L2sjUhi^cSC*s*h`<$+-AOBbcZhA`/Am=<US
%mMu=kM9GZPm3$R=h"JABfBj#@A$_1aD3;i8h$g!LX_j?_\'5+_X3Ijs`Gb@>^^VM*0IGa0JU)=tZtas%Q;4))7^@"qi8+8*Wpn\R
%bBNTFP>+i"BBJ1+g0/ORTel9uXl:BM1XCC%og(D*p<N2IQC54-1[IC_o?\PWp#Nb+l*Ah"lD2d0QMQW0GpZatj@Y3ObgW_AlI4u-
%R[L'VnSi0cG08#boSmJ;i'B0jb\(]llU!;'mJr+Dd,Z3`lQlP-Cq[4M3h:*#I%3:NHKd[&Lu[^5XoYo$L2@_g!eO7#)b%Oc+=C;C
%Al,j`)?P#2KJJb)&_9&42et@>k@]4YZ#5'!7LRjdZ1e0gYALQ<r`XN#@5&a:Y<Xi\O,s1aZXNis2Z0fJG^NXr*eRt)dk&Q"bJMY-
%kRF[UjLO;2V-X)[6&muqJ/f(ERjfrkFHF./-K<CRD$4BthQbU.?re5Yf?ZP8Gat6)lH&>U8Uk\Bj9;mJlqaF_Rs++-2LY.@LM\D.
%W_H5_hDl&TTm\plCNZ'kgHP%ALb1SW4#Dd]n!;dRTHmYGkTEI&0Q1h.,ZtE7+A&jMOL'SBeTnLohE`tpXH.thDZ:@;)h5q>4?i3i
%*jpVTj!3o4g&[E.n4M[%]g@&mjk9:N+d;I.)@$rR4d5HFSpTmkPd_F@0Dm%dH'[EE_^=Ku`R>gPi*Pb47S,$KXdou>Q[L`ug_RN\
%oQrAYXUs>CDfWGK"$sns"X+lhSfor>oD*S#Ct=VChI:'UaI"IWic#@Jmc7fLfF9`8__d-Of>]_^>9;^t&IX"Xe\k^k,8jga(GnK-
%o`Mp)^-4)C*nt&G8T2Rgl-nE8f=JPG$S/d/dL5N,:VJNdge3QNAVD+09!g(%I(3B/j<IZLm6Yk;4,[_bIA<Y6PWg>9OSoB_d9V(l
%At8pg]$K/GKhS+^GL<PMBS4kSXDsUKGCGj#c`Ii<T'atoH4`fOkU(?K??L[B(;,U=D2%Z;#&>rXemR$@KH7mU$8V][6#96,K=>nP
%(Hrb?Prn]m?(jcCoe)"@E?KT_[7^-cS=KL(<ps('GAhZHIXoO=]4A[%X(@.<;r`Wr/$/Z'HOB56Xg,1@Dad;/T?a/I?e4rc^>,o7
%/Ju&3Ie6>IpPd"1(PZu$6N109fR(jTaI)u;Q]mAB/RdY5hC@!Q.rI4!g/ttSZ\/4iCX-d)[^O>#kF!D=\]DU!=CZm#qG+5$q_kSD
%kd"pRVL>[,Rn'hag]LicG@bg(SfnTW<@l;PHG(?9G&N?"SX?k-R7G[3QWres[(4r9EjrK"fP[%FodhOK?b^"h>dWLT63jtM36d>'
%ElX'dB%^Ok\(.u;ntu.9fl+!8E%Bh.n^b\X'DqK[fkcf'B/WE0L$]A6fOpN#BCql.OP"1]75Q)FHR8Bb*Nr3GNqQ)`1em<m$ffuY
%nD>t*Dk/Ui_NFNeBtG_cR=RD>EgXslM1$.\cU0)RRB?&tXQL`>qolABee_B\:@'bEaW)2E[bF$OcR_[A"]Go!fOs@;BEH,-9'e@W
%l<E/B\p%VUR2s>Jo:Uqg<iI>L:@'e&_^"9kTS"QaRJ!98<ib$iqoh=-q#^F@p2.lQ3E0JF[S5F1Z-S#9LJI3jK5''cp6eXkNqA`G
%LIgbf1\sU>f(T1Yqof$ggIDd@fOqYF@_2/[^Vi=BX?Ns>m[f8`Anc's$S2*%p6fLbRG"&m'Dp#+@>q3.+L07/Njufb^NX.Ze]CAu
%rbC[?F2X0!7Q4'>.;sFmPkCSZ\iCt+'^h?:okQ_W9jNd3hVr20EZFii^J->91KH(0hCYHQ&tb38F4aoakXKL.TcD.Q&R(afUfh;H
%EhF,,S6ib(?ea;C9kn,GB\$5Y<84fpD/[DuARiV-RsV0eoquQUoM_W&Z6C3a9[V>]@`+2pQ8(2/=gP^>Dp.4Podq#8I5[,aodqis
%ZWB'UrI9/+#Idh"B@=ERoJtQFZ#Mub])Q\eOt`>!p]'W/q4GPIjM$u\kr]p.qu7Yu93GX$V^`Xtqu=*,ITf\]ECO%%qLQ#g_-i0@
%O6XQi5:rnV*OjhLj-[>L^B5pM-6@?^p=\hPF<m]Uf23U*T%=IfSA#FoW0KJs:&0h#4%#O9a2*-nlckDnCf5lo1(+kd$1u77`aB6/
%5^hWLVDQ,a@*PW6Z96[[C;Hin2r-[4b[dah&?QCgclI&4!h_I?:NO2!$:&[BM;3P-2,]*_8]9D6,m?Rh5P883!Y,7u@KY4?N]$PP
%MD>n54BK;1\n.a%K!m,_=']-TP3q"/hhM6(*Un;@#]8IGT/E+Z6$o.N2Q\^?jCZTN9q/lE:,ZrO$ig&!l7bm=e--6)eib&Ag?-BE
%@1m).aj/YQ(M9>%oqZ@51l7D1;Xi\kFL?Be/b#uS$ABWa#k+MBgW.*+Cq#IC!U(*8(goUUhXE*_!JAe(+M$$67#(&2]+g,C(5r+l
%PO\E]T0feOn:%!Vs,M3sSgIP=m5Q-rq_]AY[!hEAgYf(6Sfd%M^E]9D^[HF&FRPjNI5ZH/qkl/ak#_TM5aTU+Itj>Mj6W!^n,5?%
%GVAK&p\m0:^)a(Ym@WeCri=kL\8Sf/J7e-Fkk>R)b4^8`h*0S;4dZ:r^A%Ts0\Q!9R&@X3)W_OWG"U7Hb(0O5,f0,-E&_(V#fo%k
%=5C0'oTuo^/pN;I_sD`VTri2P;o`Cf(L.o?);g1oYRcA#PRU=GgR(Xq30D@1q73dcCE%;n9JY'T"C0LT)[EoQ)5!\rH)oW3@<cC3
%:55[16n7Zem-IPicY'/4<:\hn6A^*sG/i.Ea!cW`St5"A3V4/Jk<;LO?4N6E>6p]>MC.fRfJ`3,,<ELH;estN1=H_QWg:N/KB:q'
%QmLSVlIg8IVjCgAbH#e&#Y)8K]/:'t\@"[;9\DAn(:;2/3jr>NXV<C>SP`%K,F!UCR!VoGCb]G*OH3B!0a>i.?YM:IJS+4grZ+O[
%DoFf.BDDDModK:Z0nToIM?n!,cI+XW52bgN6]4sib_+F'X6C[4m^/*.rRH"X_V9u;AtIm@+&H'fB1RZ02P^Hgk>mFqM3HD!_uF/1
%&,:$s'aIZ6,2se]7]phjh9"u8-!"rp'-:9:"1nF:WuC(RjN-/rXY]Q:DpkE;YS]5C?2B!$D\E4RUhh;'J(S%_f+)"o-+I^`c2qe@
%j=GJtHtsq8`g"7l)m%$-KJh??rQ2)@l]HK0?E0eooe^,pf\Nc6IC.#:Z4EISitt%/$4@!%Dpge"X7OMjUN4``@92e%B<Q'-'&Vji
%g&]8[B"heU_[38jM&G,HA[+`8%I#)k"e5:m@eh#3c3/NSqk`ML\t[-qDp[;!G-T5E_1C=Q)p(,m9(*6o[7Ns(Y\@-HRhP>:f?-qI
%gj-iUCtr2%!h3Ihj#$2B=Dlp"m(T709J<7D(n-KZ\8=b:1`iI'7s`sFSY5P9Xj3`bY].#SKnaP*bQ6Mag&[[$Bmk$nET<GV:A9:\
%b/USef(%j=a3ECO)jo-L[=,Ohe]#70Sa5qaCN<q/DDM_%]^4R$mnJr!:\HIih]:Z3ml,'fEL[VP'pd]oRHTjjnVH!G6\ZjrI=gYu
%Bm4@YheQF1*Mk$!*K`85V2A.`pH;g6E8I-oR:t>Xc2)^0k+M)#C&4q[-B#9Kc=n?g-=t(8E[KW)p0L+Q$H(X`P6%d<7;R0E(Z:Y)
%_>e:*5)!]/&X_5>g5^i+9%_9X_)ieloB`'Nf,1thBKKD4a((1"l7B9@e27<J.8Xa!7kprZ1<mSu(%#JU)dRSlRneo>opt[e!DCJ2
%)p]=>SsQtOefX3A2!u:I'fW#t3L0sD)JI[XliV+R77,iUA'1ta1kV(HPA(uBM4Bd/XFM@FBcF5ig5]mTfXh<o[4GpBgSeW9p*khn
%h8U[]HecmqM,*XSO#4n,m#[Co1`oS8#Brm6>jk&OHpkkafPOP"m1W#af@G+:8^se(l[2+l4h$GM&hQh;jmInp;A,P_,9E7`H>Se-
%BK&(20!B".]kpB9dsT*AR</qJBUu<>/h<01&HBY7'cn6VAH/(@$8'+*LVBi$0B(UMNrrWf-k4Mn5C?V-]HI"\?WLhP[QF+mL"9HB
%%shC;On8H5pURA%(OgnZ8m!uEC<i]8A^fBDNt-93<TP@$>&D"CE/RYsp:9\>8DG@`[5,;^E0i^a4'[$?/t:SL%P<<pgKo,<+$rja
%-^c>PmX7)aA^dVZgKf&;J(pYHd!K)DBH')q2[$^8^[TTQ6J6p-5d@of:hO_?\a[t;37B:r/f,S3\)bd,N340S4L?KXH8FoR(EQb&
%Q.u<5G3?MXP.c3QIG4@;(EV9=j&iNo=CL+c_F&[n-i%KR?[-g,He[N,p4m:K?[-6K+1BjG^"nBt(0e)?gCEtB2"e`'4YuZ"??k]'
%T#,n/4LDlj:qqj7NscKcPBg^O0LFOj_F*Y=@!LGbg0P8f20QP"ctoHtU"jgih#k'#FpnC)4EQsK]C1H/p9u%ldjW*LDgpFK&+-iN
%)^DgR?[-6T,;Vld+dfQ@b/NDrkusKe_rZ=`*]hXLLUcj#rjG1bV!W6^iKj3PmX!ic*f=qSm?U@REoE_jC:!<Y?@Ie?&+/2#3HDb+
%Knj7h(Wp-51g,pq/WJ!26K!^@!A6LA?b85NQE\hlLMPY>FgiCZm&D!X4LBla[,IUn!t6E!gS*FMnuXN,4N%gFlPCU'^S9(Cg$E_;
%Th1u6k-dY%_TI<D*bpCFrO0W"FIL=*L\B"(N^+WC_F&\5k6RWQG^p/4m8JWX7L(kZGj%+'GJ=Lr2,Hsni+<iW4'd)E&&hLjY$ZF`
%H`B9DmEcD?g\nuV_Y1E*]nYBd4D&ula6"Mr^soIQEoE_j-7[IMe1MOY>4i?=mEhG=>?lDd5J,emldR_-X2HOc]C:!TnBdiH%(@8F
%\OBB/nBbJmNXV8Hm!Rcc]uPAn3<X$!$P2WgFEL'!T*l1]\>d+-d)&S"HjZ3\iShd!jC'Z'gqpDNkJBU`gCEo@$7=+N#3sorL\=<N
%8"7t"&!<Zgg!SoBR$`e545[1>@(qW=GTt^X,uLFu#S0up&RkS8re;[j=eoT!L=r;U]WNk'ROF*Tb"9*j3h%"YX1TT"FZuM'o[^N4
%W?qrR,nAbHbZ*AK\(ah*niT\,;D>/pI<os7%MQRE448O]`1k,Q_Hfl"de=:8^<kBuc2Zp_dbpETq-E(qme:lX$GLrO:/_rZeoOdi
%78`a8n]P,l*fbAA2r&Ja)A_,u=u#`ADi>d@Hd/%ue$-gK`d](YI/ihqp;`Pmj&Vp9c:kOiF8jlPqu'.dSdDr1in"'MHgNtUqML-9
%r`cr"?O]ff@e4e-,AR=ED0km%C-K5HJ^9jU)Z2c'Z;GP#i:>D\_=bDTU6tF,"Q;H0'?&C!=ZlLRFMrFem7p5FC]uF9Tr2k:Q9LTJ
%n9uR5pccFmB].naF*43MH+eI)IAQ2rr;nlN\KDPl\%2>^cd(c[X^]:'`"%;%d(JuV6M/cE7]o)Dd+A!^G:/HTXfKp=&E,`NCp5sg
%o\;TsgKK`g<Sa_6,'F>Q`8/X6L8:=$=tn*=7\'$4nG$n(GN]it@0DCu/#X%_9pA[G*)LWeS:L$8iiK@n?9/!&>qoOX-oRY1[tW[Y
%0!`]%EY5R#_50rIGO/6\q?],?].-PsTASm2_VG6C*e.b25-u`u,6QsO9WWX;b[&`R!hp'qTr7LN86;FT^&mZ]Es[9t1uD$E0U4VR
%VuKig(BI74Lre!LpG[IOZ!NI/_d<-XksI1<^m!gfr(N]W>\'LSb35q#8Gk6!ScH+j-@h_BY[!BME%H-q!cUe#J-hgL3+&Xi-A116
%Qe^)j?i)%\Cb%.?l3jsr\JFBYmm>`#T1N@7&^e<p'F)\f;Y-WMs+P.r\*)IX&&&N=,F?.SC>TJ04lo*L?2[<[:3-QF&>s%f`'rVm
%&l0Sn`<QaU")t6Q9G^1c#Y@F7\A0*.+Q=PRg0H]aO+PomUn$jf@8mSN^BZtB"SEp]8FY#Z5G'[ck]I8h/OW>/:W%X\qd.FD'*+I&
%H%E1D1b\MU65.VAU8\P"e))ee'3m[b8Y)Y6P7cn79+9(T]WBt^qpL9;huPZ]Jp\\?OGSb99S%Z^>^R?Bam+IqdBb36'%1I>mG%Fa
%pZ6n*;Z?+U8FDU@<0_C[3A9q9cTAP-1'H;rK#;!'F;e9X@@4uo^U9+E6g,KI3]]8-s2_rE9@2n8:`l`S)1@F7VPd&e@h=Da?mU'6
%n+Zp.Zc>KIoNV`ogDU./Bcm?*4tU#3bo*u>V)]Pac0N9Tr,*(0#KggeTr&L:Ic0-R^MiTcnJYj\mAqZkR!Bd`/0"K6-m5U_MU2%F
%'Gl7t]Bp<URahc,ngsoI$"],\a5>PD8cX@i[!XliU1_7D$a>BJ,[RAp(eeB7B4<BX]mc!heS!m[i&g-c"clDe.dG5E@B/#oU/;V:
%k+b-7Ytt1b9&;cEi/n>&;P#2OX`]>3]TCg)a0"-(IVB,le@sqt!kTPi6S/98$-(is3#ieVhg)F3&AGBiG/q@3UaFJQEtj`?5@]/,
%CCM,KK0M-mTI>8lTE5NOrV@"=4;-:;QbphSKDTl0W8G\UB,H@F8eHtp;[MiC.4?nqO8Pa;K3N)?aWN>8<n&2I!-:.BPJP,h6>H-m
%%d=<[cY<H6F]FG5nP0hi]GfAe:P,QVk6*22-PbV=`#XL9Dt3B<;2D3^%A6IN*M8+?^i780#idQj1=.&T"Wtk,;W2sro9*Q52Di4#
%be$r&n$&H[mI9U-RqQ*=V(Z?@dRi1LW(<.^649+U=uF_rotnlarS"!'i.A+XVZZG$!dX9KGH%<&oX+`-X%6Os_q>JqXLhZ@RLuK,
%SI.%t5<5I,&T<5&'FF(%WHo5SDpq1WG[#b8nX`iIZ]m[//OWAjA<QeL7a%%2Oh[*th3R-iLUG^FVS:l3'MQ'74GbJ7T!"8Ch^8T8
%k(?XtntdeG*;ThpX5GkRH5Q\erdgs!o5**-;*r$!IJOEj)J,\8dGtmKNKZeob5`3]\ipO'e&7X<#K9B_JLpK,'nA0/U:s6/T'YU6
%$0PFVn)n5Zp'.2&SO]e_4L>_pV't6ZiI\!ZJ)X=$1gc)uMN'C=J&m#1hF-`Vcgs<>BPQL%TH9D=1h$EPKiH![Z,WMN]i16\P7Jh7
%=EQ,8#k>?*,8j=Eb==]kpF/b:8*DXQ)fiF-RK+=VVQ'%=gSB]A;R6gr\&M#@%\H*F'QZEsm+A^@Yq!TeCW[`q^<5kaeFS)!aE;.a
%,/\\\QIZJ@P=f;APr[<s;4KllOT[;_*=3Y]:a.CKo#5)4K4]J"k<)V$%/X\h;3/J`,-$kH$sqo),/lUP`JPp8LY)rL0f"WQo40:I
%b7I\ELQ6[umi0]4ogZ"gN?,PF=JN)FT.ADmQV0B4p#rUHQu%<g\7D?bmZRF\k[fUNn+-m$iMoMN'MmJkCFubshaBp]A;9;tk0ddZ
%(kPBmPWuN'8s))g?-Bqu$0PEc.!QgO]aSd-B(D#aZbT!>.-G@40Oh-<g8dS7'EH_1$=)/?;p;;`;!79EmG8%jD)Fpq@gRV;VC<j9
%>(fJ\M1)VF^2[c<b>ET8X\s!-$*"D0&t&>jNpPUeHoo\K=J3-(M>iFVkZN+uP9fpQA_[:SXEtJ"6nJp*:QoBOiZB!r!:+h:'Rm*u
%/r_"j&YLlM&eF0,JM)ANio+$`kF_rJTe$4GPmPtONE$q1#Dg-q$s=SJ'WI.i00t$"r`kYXcRHI8f(>9g`dfp<oF&trn;+d>mBLOd
%DKJu(LC4fc]t\Q;oa%1jDG@9$X=8bi`.2^NZ?Kn_2>[Os1"d'&;^q!?T,M[G6W*hAD[C+96r?.f@%XU0eq_e-#ZPe%>sS5t3D]rZ
%`0OMf0CZhi^f[-i6gm5GjrB@IP\-u\"3u"K$s-I.F=@1RF,oHsVVD3W*gu('lEC?YYf))aAA5e$9]m[J'$[?QDg3#kKlX10,I^`c
%(>+aO*qX&%%=%hT#B&RAK)51*Ii0gK>!9N4Nhaa'F_N]Pd9HqXYFl?E?F4faRb.k_h=e[_69\(>lr3oFQ4>MQ\@bFXmr(5K3Y8LA
%_0O>P[B>]HF=Ha.S,^3J.\t`s2ol>u)-u#]r^PrmiaR^Q;7^=l'/+0F!7<*`O2u_QE%j]f>N)gMaeDVQO1hlD-Cj^c(OTC'e'4/)
%R/ANnC2CNL%C<7OiuqU"#tJd1'je+*Rsu+\]N29Y8V]1'LtAkCC5lJQj[]-OcZd^$mRCaTQ]BEdGrcQuAjYXV<O3Mu+sO;3'!@k_
%ijGM]Q,gR%,I!usJGQ!db.KOLioQPF1!s>5"<U3jS0FCFaG@DgWfR2UjKg0XketIp4K*'GT<sK-RjTC!(qgFDf&Ms%5Rl)mZQ#X9
%W;I$+h?iig`Iu-3G]FGk[JV.g(R8uM42tW7>^7mtr#_-0o7=E;C^K-NE;RClr5W)65+2%T#,@t;X@*?oBo4$$AsTXXjZYXN*ri*A
%(I(*\r0F8]e@ssJp6l@>KCW*U[eY'kWdSa:!4+9'SMD0<I3Y=:^#<(MSq>'W1M05WNhf$Rj,EiJ`!o2d\"S8Ao_5_1V=a:Zh-$`B
%<-_E7R9J/*e-CS.[>.OKVrmiX`<@c>FR&BfkOTD#\?"d:_X]P`I7lH.oL\t<9:n+gKoaAJl!cN[K"Hd.iL'*?m.kqsJA^4dpiu&X
%3:-Cd32`Z>ci1XkU'9\;DA>@m;('-_8OpZ>Sts!1SqE37RHD3U*7=m-Bf7=ULg+O.8kk,ufo-Mrlcd$geOMSdnj#>I'\hWsCs8S!
%]KN[8K/!VXm&f@iR!$H4VR>dFUBYE2&Qcu'=kgiZZ/W1PF`(aa('L+`g\PO7I<sUfHiZ(i6YntY1\9V1=kcBaTLF+mDF=@B%93ck
%%E]]KG]*U$GMq#<EsF$Hc5liJ<T$ZV4#m06E!Nu5>Bf$)pqe%DL$EREio/B-r*@h2c7e[HigT9H*PI%H4a6DX\`EGl6I6`pIs^/&
%n>!RZ/T8$@pq+]LS.A3&LOJ?7Q/,pdnF2$7@DmGEgnXW>2`EAr0AKX5F@+Rafc&dCm$-blM[d$>8p#Q-)6"9%?VfbM4Af:$1O?o$
%:/S@bDg%Y?rC4L%rl0kmHNhZ_hT(E\cfW("Yhh0acf,(BpC>!rrS#,p!E`udhQtkNWIhk"mOk>GgNJ723d+uYSN0\qY8P6Of=;.4
%SPm.f=kh)MZF$^Fj'Uh-S?3gMWN\mP6t!'0KIQ1\b4^?!G&$9h:>UFq"I8Yl:8>8hk<+&4)E-Q)<lT$omQUZ@/<gb0>@TeLYgiZ3
%==dG0jsSs`gXe9h,WYW#1Q.sc\A_7h]dHrr;/4GneY$'E_A?WoI[]aRkOrP,1[a2]-h.`#RpB"pd_.>TqbPFMS_+mWq=d2RaQFVF
%QXqi\>Aj-r;'2N?MF21V^MRnt2g%*[^56GpJt]K\EtGiA65brAl=ii/5FsWbp]6\fh$lNtrAr81]FVcEE8t.NoIjht1Xbg1MRdf9
%LM(0<A8!='?,uCXl&_>s_IcP?+6!*8*07EH#FW4nn\F-rY1*)a.30!O9:F=L[Nj<VCq%YKgQ?SHdN"9'-\Di1d%M.5e_\Ks5ttgE
%E'6a(543=:F=E?nJWFV2s*]67MghPVe;>`q=(IMCau=+HaRZo7Qf8Nak*::0JtE14n][C0F4*\mC9S6f!e%_#pL'\S[tjhBY^q*V
%7h<UU%NNl8(/3D1ECM_eX>K?04Hl'oCuj@m2POVL]!<5spdpKhOp05!(r"cUEkCFbM2e^P;`noP:nAHqmd[Zd"<U?Xm:R@;B]R`^
%MPlH3NRR(&`m_SP4&ed9j!bA']HjtTbEr`_Co!%8T'!c,PB2bU[!s&(G4Z5/$#mcH]9\]0"QTl[/s!g$M"CHMs'L-1g!rQuXS_s%
%9E,%G"NAdLd0Lm%,U!14g6cDk1+&p2ci.s7qlT-GUCeo5I*On3qd%AaMOs8$T'i%>:\@HQ+Pj5kP?:CuWMX%f,m&lF<sB*'nMb&4
%hs.th_or&(W95_L2ELTI?]U[&K`73<fnY.Q>]hRgF8l(1n"Yr7.Is^*T,*KOn5F%`H;lRJaQc!=WaR^]bo#>%H1a"O43k<2?9Jr[
%@sn17KdRSUms*]<^L<iKh`c>Y/9c&lDnka3iFm/%]_VcC/nB?JT0%kLr:^"aDEiOG9_!W-qCsa%OjL(SFjWb@8%BI5fhe*PqmE%B
%5`E@-Y$tK?RYUt;'^ur.qDXHTTepi"Yi>\0bq%]&l1<nl_C)$'hbpYPK+7,3%/++B>/W2VL=0R>%`AK"k?"MJAu>Jh9?s.Rf;BB2
%Kr&oU*V/!K4r+Jt+3*;Xb7MW.()SNEDD+F::#VtTN<%:aa21QR<$@`^dsaE#g>32t2sUuWCU.2/+b3guqI=@gE4X,&8E0m!IZe#o
%>FrOcid6=5-gcD[J!dq(?;k2e!=m#30_G<m11t4<"j37e:?Ie5DF5YMG2KCFm^o=a_=H/q=Y0aIh2oZ54+"]UMY/++cj4uE06l)j
%=t\NHo!-Q;`<0E^p(#%:qNX+2h"k`TI^*+A*H_`.:LXora<GS]+Bpb-2oRiEX6Ta*WU"M-I%mh<rM4$SM_J.+T(#1Q$ZZi@S_HR,
%'hBFM6a_%55h5s[A8mm<k/AOK;-='V3U3s8B-$-kpaLG`b0?$T?Os%2fF2:XQT!^Q(10V9LimAQC0uF.o5u0Pe*,&,(!gLe6C*S/
%h*cJ@LOK*79RY^:B-"YAVMRrgKKa'X9\R;fa+D$p?@<YtZD0-O9');t3F!Z%?IPec+W[f5>'D&/>8qE'gSKMW=$3oLf[dVpWp'WQ
%9c,3.X)^#2;M1T_[0-@N*U8/.>5s$GDj_2k%3j$&OaZlt7^0g$/uf!j-I@Oj7opee7fK_QE`ue5*EWPj7PWhS`/5``D(QuV4]gk#
%!B"j]n)LCMJ%D'jHinAUr8a#,e`&6ap&a^#rL,`kZ(@5c=prYjeo(#e+ko`ECQ0"8?0=k*QUL8KO65!H:(8@sJig)WUd]0c^:/IT
%g5ar70MK5o*t&tq]1^(;CJWLg,>Fu)?gK@pqV5e%[ptB6":in`DOI+:]9c.+&:LqQ2f61.0QD7mon`[Chj]ZBj6Sgr*K>n',H#pb
%LO(3.P?ttaD=Q"Dg,RF)BgW4^eq%$Y%/H#47[[b^W1PbGpe%qEk)MAt4DYXGR;_;lVCJ%s3@emM>YGs28IZ;=HtDu%'ocD3bg=K_
%=H80dB9DjVLsH8uNoVQpCM*FW\t14ERTMF,Zua>bkfo?7H!.CCpo=HR%Ji+cZ]$4*n(scr/;n@BT0\$0KfLJ+<:[\\f$@Fq[D6G(
%:(\/s9NQ#9_NV7_]PU>K[LW&XIZn54Cm_D>+eGE$om8H<l=aoA-/p6We52%1Efr#T]pOeZ-gGL7d$cOuA$_1WIAalY\YI&<S+u-M
%!1IA&gQ0S+`HcO3):]FigUe]LB1+$i-fS^5`VZYKI$^@.l!hE=8'9AD76>qS;4St*1UF%@P7h*!+J-(OMrp;LoS)1&3eR"6H^cCd
%RI=D?o_D@C(re[`CpD,fTg*'gk#&<WRuR@EZJ!n$Mkha>X365-%_=7+Y,'9RH+sHYdPC7Uge:%>LD]=Ik.QbC[a.)Ye+]sAg?pPn
%ON'FfJX+m1Qg&rBaLJXJ?*WO!2ODPU4?LdNb@_('cl9T&MSqYTOetQsXi]8Y1'3Y$YY'iFk4)`T#l<':!q`b(@9'd"3-4JbVLEZh
%Y7N+VRC^+G$7I*1gMu<L9&4;7c!\Z,%1?%,YeRX%%J!!4j/#Gm4DCs\![!su`="XaU.Q&Ej`9kBULciUB@-LsPLG<E)c3!P$Bd&=
%6h75.+1`&><0BE584b/I==>L:Y9]<@%$0T(,af?V$!GS$IRtm*(eK?!QR%c(N%E\m,[$e+lB%0f6D-N,AFf5I,RYd;Yi+M7TNKFF
%@C2!\[^ArQf0[G/BRCt$182e+8p9!d8u%a]><c/fVd'(Yr5!=?]jpa4H&We*C-I.^U0Ap9YcqCW":FkCG8_LfnG[Z8*\<Q&)>Zg7
%WgsJG0ZV$T!D^;b1[U&JJG+['f'9;ES96k=U[;&9YX/ID8tK=)MJiIj'E3;C;;qV\[VIe.jKanpp.NtY1=Il2S8HT9=u8_:34Y]H
%%ae5/^0GW_BOo@&6!,Ug.F]g2QZ)3c+ba#hJgJ@sNl)4/ZRo\`q97-5=FsLE!?O,Wn"t6JUt4=-MDE8R(hU9+q"DXpZq>'!AX1d1
%KrsWBKjRp8!nf6&ll5[dj*o2U:7(^N.LE$!`EoCqPTVf/#:Jc5@20'5I"A<f:-[[<%OP6A6hWsF5.5_iIp\pCpUd;O/dl#nbLu:9
%(K"0%Oa8BfT!kOO<VJR9q;2h-9hWr<[FX>ZW4\iH#T]b.Mjo1#[9/p/r8(PeQqMI.[qkJJO5J2IO]+(7IW6l+=&,#pm5[#rG;LYl
%p6Q1;^DlA%-@%18nH+!j*rfV-_2-.rQPM5EaGVn[X%i18bBlGq3NNm0.4?[o`ZEqJUm<Q]Jp\R-"gr%s#<`!*l%WU%#/[A^-(.S?
%XTaL5,ic6+N>DF2RS<+M:q5)tje5e3J/5/E&hIQ&Kg=<!p:!J5JT`XW*a$.shIN&.?2A7F4LrQ-$b;ke,pPg/<OhjnX^IhAQPXTd
%Zb`bd!2$.#,V,_iQJ+]?<!:<eg<_M!Q;HR?6/nD?03ZgXR2XH;5%o+0(gD@YYX70?/;6A61Ec5WM7q_j/AY^-"\KMB^:ob6T/4cZ
%1.r4*h08fA[C&N=]BI8+;&0VA!AcUB@]/G1<(O'?7F4t/l]GTT\so58/f`9Fs.Qlb&@K-<_W0%lj%O4(>G>"'-9q_Re%XecYpO7#
%[;9F;9AZ,`,jV\Y.jYaMoc0A9h#\^3KZ5.<%-XIPBp[I`)F-"g&8l1g<e0nmqTK-Uc<3-iQO@5Y1V['WBWNa2^VMUFm?a0^gf^D@
%rV!p%DuVp.^p1k(OEHQD,r?!AHF#EZXn<F4kJ+]+hDFs[2KTXBL+L,U*ki`H=P_WC;qu(Z%:5n)m+FEO]$%1DZg@g`k1Qnt[;4P_
%R1R`MBE26>/jW(7fufkRO$j?)&,("(mRnGMrA&D^aF)\O*n5=Vo5_.R^+qu[AF6`b8"L/m"LO-:iG.<u2[:_@nU"#<0b2>qlhY(Q
%>`7:=@M[D7Lqu7Z`@RgM.7nq5RU4*rU6o(^kH@mil?6c,=rA2imYB&j*VfG&b0(W7:BqWploDVnbBIhU)!Bb7`=1*c#C9U&Wkadh
%<ofE!m4:DY_pg/<D[oDW\nr(DDQVO<:iX;OrJn:$2ReLJAffhWk@M1Qe-58crE_Rf/t187cpa_kFGU;>OB)ZoYHt.4euJqf=`p0F
%Par\'A1G,0ES6aW7OHBm&(m9N[:'>&1Wme7#r&X<R8HGN`"Bq"B1<c,Qp`!JSJfq1]8]M.[enS"A7!tRmED5cRDJ6?S>t@^FrdYX
%^'0D679a+J)*^@ZR!n<R'>odo1&KU/QJb3p.XS^];*8H(<tmpn4KX:lAJjMsqo1aG]m^X7Alkrlpk0C@`3"IN:.Vu(]tM"eUeAjn
%iYT:4*i;dTc'HcNS3FK_U.ANBghc=0_,&1QIX/P0"VJ5Yb\CF8/g0Rb8-]p4L&+)n#_eKa/=\<2(l>Bf1cp%q##DEEkfGLNq(Kl:
%.3G!u1^?WdF._#lQUTO]5)In">SHpe')G&KQet(."W:a3>3e;ko&)sYmd<slV#Aq9TRs1P6,O56;s&'1i>/(Qp[Ihl;.Z\;#2bn'
%jGJL+Q<P*6J3c_rLYAj/A!.6f4q>lofu8&CIrR[fi(7IYDCO,\jD+dYUdpiZDIqR/S+dCG;G<#'s-@3Q]=e;l$\<>&!Z@m($PQQ^
%3-@l[;sW"fgX:G6+\F`IT\M13b/oi#"!ctD(5'KXElo!Opp)9^1'-'<k(rr2;0Q$NNAt#m-lVDoXFocZ)d=L;aN\B1(Qa&e)"P.j
%8W*Ifq6@7tX[T*Z6lLSdCX6tS0/V7O:ZS44$)p)Y4M>Z/ln+pqhY!\.miapA$mV+m"g)k?/C/ttB&crNp)Zd2J9deU'Hj(#?Bq`C
%lH.<a8G$8#/4^%^3Vc:6'Wf:&-<npJ`QuULR%uFs8M\%O[K)+OFKRKWF9@Y-?3,auSQrOB0Vee&Ulb,;2LknsnseL+h(V':TS:TL
%7>HoRJJRgJnKd\8*G?Vb)3Fu1E1h>TZ5AK%/`](4/MIY>>0)%;I@X4F[#N,eO:F,<Cf%\@[*ItK%^_>a6^;.$%^_>lN+^nam6JR;
%"\Me\nr7n?aG)#O[#eU0l&EQ>ZegG'r1ar;B/pXZQ"ieS=YKI]B177ECp&`fcmPh2Ys#X@B&npDP('h;g1Fos8(>gJQ>&LiZi5>b
%;3!I'DW:>[76&T@_:ccd4,\-LYq6NbmjuV$`mhgaI:lE;1TI>^loQH-M&sC;.*#IWXa)RIBBBK61Gcmf[RnchhSCrSB:!q?Vg!;F
%7e?,W25K[lb&Klq*jPReU*?$o(Dnm*)>'KM]8b#T&s-'"DGT]GRSE,;)n.V=Fe_+qC1*!.%2S]FN<\^?@V;96?X(PG6(8-A(S40K
%,^[(i6V3"KJTqq-e/KZ&n7/aIhai]h/1U)@99Q.*YLCVkjiRcO9"u%9,!"=)rktG[d1*I<^RE::g0Qe-\UN>dgXI9g6C'(tH@D_8
%NG=jodJ8oE)E<sGLK3HGUFWFj0h5/I_#ru5m9^&-.0+?GK?1j%"Q7V(=RsoDN,?*&[-#\,3p:F]R`FgQ9f$'r0cR.'%X([NMDptD
%O!-a4R^u%uo];(C%/71^joX,nB#\M"aa)O=5I3I:NSWUb8UfC>VkM=52B[,R^O[U'W6J8+Nnn\K<4\hL=K:-mN-87+?&APAotKKj
%ea9=]]i(eW12Gm4c</PrfC7)[^OA&cpCH1NQ8Xs%M('\eVGNDR$\apIcj=@=(ape`3*U&7kLrUf"=<O=X9IYNkShESHO9#bQfu$n
%i\Xa`T3ROG^,HnNYbmV5)q<*BMD[PD:bm&eY>n^'q>smLYW.oK^R$>-P^l,2G2#_L][LEZq=/*<VXC<H:TS3u+/>_a:N[5h/hj-/
%A;8,p!jhRe@:\+O)#$Gif0$cd=0aPnOC0!^LGj*6"u)Um#<)'""u&g);ZljoBTCn`,N$/+)o)a`p!%>]<:,;snDPrOT]9]'4*5Vu
%=OQ+cG$F%u@qtlnDlhR[8mX*B`BCWMi\H#?eX&:3rqQ4:cPPg0f7S@FLJK.gN"rZeLX+/0c"?h%Q(n_&\;km0JY:^e+tJMRNs0&k
%C9'oQ_5f=af2^ktqK3MdFZ^ksQ6pBl7G]fA7tK,ue;W1h--]u^1.ZFs'RX<R<4PC-718mtk7F(Ye5tqMX8:@dEWs2O$S,*hZ90)'
%>b5%J8k`:#>0V/p]`PMB7:j"D+MRTODf;H1T@@r@r8:,p:O_Y5"$$C/H2oDn-8$YgpAch[LSS<E\S5b[-X\#oO@MEBoE7WT61S0:
%f+SuI"bdHb\KJ7+9D+Q64Fp@I5T,Z"-)ZM,Cih$,(Ml(0#C*<!$>)Nte-!,Q]+#"gqZPS+'WckC3"1*fe+r8:AnGTF62S3-V@RcA
%GQNe:jj/DD%b*gCO@@e,&VNmhUl/;Cd:Ga<6.A!%e1lam^tKaGn5,<HmLSj%+HTSbkNh1U>GGcZb@Y7"`WZ+F!9UXeR_ojEq,P#)
%=S#7&JR/u0;MN)mAI8%_.^>f8;mt)"]!%K\M^H+PfUC)Z[_Q(7X7f.X@B7Lkm-&1R-/*b_nb>)kmM2cZD:*++PDt8`1oK+(S*QpD
%b4af^oD]&]FDL>0QLpfTUg^B8Z)#K9.DoB<+F,b8^L01c_&buLin>P1X@m0jH>=:,e@#*lTJobEl\b@Y"aV],3V.LqF^>2sF$[p$
%nn>;.YGA$d\8io^CCTZYXqPE&dg>8h\7dQC\eNa^6Butg=S]h1fRbDOofuPP]qO!C&UW/(hli80-nU'p=?eCq$E!uhZ*U34D?$b(
%]Cm!krUDG$Bh,(D1l`Mcp$igmH/lR"Y1(qAlf-R^1[P_U]aJ\Y-dtE@4DW3FXXo&dbd?<t'FXb;C24UWSu3';dO6%$r"Ffd@2H)u
%UEq16"]#T$,3FX0%_:e^9&"F=C7EKJam,OV=,KEeXL&HnAf>gs\fZm&!\hIZqAr-d71):tH]BDB+pB+.&WA0/,'T%UXFRAl3\Uu[
%"HDE5E0dT&219Q?K/g#Q2D&FD";:C@3c^fb=SAkGs5K]EW6l&[5sNoG]\,9c1druJC)lQ+D`-EgeFIBk]C5-#7Vhn"2:fR#1+JYL
%L64Qh5uhf<hT1t2gHlT46'"!OQ$>$R9n"Po47.Lg42%LLSNiQ#cF;MCjL06e(7<5'3gap"Jt]5+*`(`)%)3#dT.%OZL[\*mD;u;>
%"i-cb4L:I*Q]/8KlZT(G@uG`a!X%et!6`$F`>*:K9/C#e(8jq\/(s+7g\56YrGi\'s#u8`/)J*^+u#tY2DUAa&l?d!;jLRp?&J0!
%b#45YcLD;$#["6OloBM#^'LV3NLJlD>&,MD9^*X!7Ol[nC'l=*()O_Xfq:3-`!j"A]HuAP.#8LI$<'qfef[Ra"9iEO%\g>E4cC"A
%JH7E0Y_T\bWYbo6D'iBPD@fPcoI>df%qal#^lAb^"=#/77XGIfFS`j[m#I$l(?X&0p#WO!/;];sf2+FdEdrmA[&/+r0s`E`,:kUu
%/2(Ep_-,!6pA0c-cnJ=(_3(E(ReP-];)iOGbi$?uCGl9+bm^1!"2bP=2)Db5$c@ptk4Pe8Z&$H)C0nY9*d'[UXlf/?iOsW?j!?\;
%02g&AX#pX;]H]5GQ)s5nX]i's-L`aW\:`p!M]A\A9\euREfQuccubj$H,RDI5s'BCK[Z@>R"gG>L[A5mq<bX)!mZBGnlnR9[9i[%
%R)q+jb(Fk\<goe8:ap!cRQ_$t(p3YBofo:?afk15.;&.C@O?(11W^/lpW(1P4S>oM)Cbc<6,a#f4TEp(.;Zne!+>U(O\*bOAh^8?
%ktokR24U:68kmsFO&J60LQfFr3f1.cn3%VV3!,LgYlH:u4l98`Uq+hRKm.7IRU83-odFE]g6g&MntE7Gm;N40cki<h-J/W?n9Not
%6PT_.LW_%@!rdZXQZ__VX7_PPDMeD]@O>B`[o&'Oo]^Z@`UAP-g,NOP+b^>Z)+,0HQU3%:X*s;E\\Z3%^U@<V1?YuLREYPDGQ95s
%Q(Y=VN[g]$*3G=Li';##0[/]O.;?^J<:nAgV&V?XWFr8\TEURVndO[OQEbU1&RT5Z`(m4"gf=;`V@9Gu.APHr9Y+e0S(k@kSVt"Q
%]l6Djf(BWLoXCkEh\jEs1&+qA_[nu^._2,u@ZLL?:o<cW!%$[,Zb$2Enf6;Y8ZN.F3BN;DGJ5qaEjB08IO%udn9&^5)h+Rfn\5Om
%I*5,()u3$cea+PCOuS9<C3E3o>VEF)`Ah%[8'_(Rp5G/U\W>jB%"1Vj2KIVomc6GLj+Co:#d`LAPuVUKc!U9KD.>?'+7*-4D<'kf
%3L9ZPrO^UV9%!!d_DJZrF#3[`7]1*n:<p5e;Gn0>R`N\Q@C(Z1iU4ruZ3q,K!aEZsMVYd&?SS&$c=SK4"<KY^!'ul",(Q)YQCr7;
%c7V]7Q9g;LXI(Bt&]V43Wqo`\W(mq@+O97a1K.U+H$?L-Q>3W:93RDI9kl^"0go0]N"rNFHMNPfU'\6SbkNXj90I-n'nR+[\rbbp
%:\+"O>&9oh>TZD=@1LecZ-tl>)[nNCm'I;>`fg0fMOb*jQL--R@$o96B\@:>G.n89Xg<PgYoXl:`4E-hDY6ue'&lg=6(qtj^u5Lf
%k0WI9;'$l3D6_*\aie5+YM(OaYhu%TYQN6Uaaru*ckn0Sg.1(c3P(S8S@SptomEf'$PI3R%+=ObK""pQ1X;n]Q:.U4>[g^E]c=J?
%o-M(A"/j3:^Z"hHYF?rLk02k^aVBt)>k<l@(q5CG?,MRNG-V0A@5]_blfR_cVG/<]XFl(=mP_0;cIEhF\%p_aSf(XqV2htK)U-SF
%L_c)ug=Q$,.$CJpI;>Y'`mSBR`fNK<hsWSY.&ISUnXQ+qn?U1#f9`N]EOSfF*7)0T%sM66;WZ!OEs198T;in(5`IR(KIaNAc5%Q9
%O3Ha-X0l]Dj@>>W9XDhLDRBh.Q\gfKgSf-l&P_?u<K=!tT5&ElX)_1MrCi\"9U2XsbHE'h:A*:f>jdHJEk)ei]-#/'!]?&cdLg.Y
%USimN^T`mWYBRWm#!W6AROQ'Q:!V7Ip/I3r5Z#K@X^\ZGT*T6:b7F&BnK+J.70#6J1*TpR-$^=`LFqdh]gFI7F_)[)D]n`@K+-aG
%)I?i9lat]>=Wcu00F5Wu`r,[pnp:0#6D93Tq<j&qgH08tN2^hF2l#B@BgYc0:#*#8%8/.+U2s"R_^]nLkYQrVHloAk3jBHtK*^7_
%<AckE#YO%(?rCs*:rFJ7D+G"'j?ptQ5p@0#4%tcXF+)F9;0T(?173_r5mDo@9"gujbQUDojVqMMQ4)OpTf<HG29FA@Wuq0V_*+"N
%9dX#LVTWNbM,fda2,LrH?dBILR(g&`f(@)C/5"/56sqQJo=pm>n/cJ50\CrBesQ]mEkVb8YKb=R5EG6>@IOs5JLM5+#-n!80i1l_
%J`%/tItk(_f@,^#<>&(6Y7=YLDkM24*[r)A.c*GTE\P_!<Ug8cQXd%A-t=mn3K:2!pMibe]OS/qe)`u<;SV-EE^aCZNT:)1,E)Cj
%l?':D)G)-YY50j*_B5Y;&ES)6Wd"Wb-k`83@^mmoY;?ku6&MS&UeQqO<Wd/;h[S1E^Ii@0c/X^mS[uG<WdRhQp5H]ee#^k/"Dk%9
%3he!*9K7K)J";6:qCBBG\0M_slj%,eN(oI,0h/l9j-!s#OPe\:R1s.uF#u9O-H-f31H%fO`L&KWifRd+V9%Yf,T4$$8VS%i#&t1M
%nt$)Ao=eAoj*%VZXOfHX%(<?C`ABf]YB%T:KHbXj7ZZ<;8@`3/P@<RbHJrK)BGo>I-]lQ<1ItOQHn\l$RES-0">la1@2o>a*_7Nt
%),!CpT.eoN?QtV?\,!rn`&<h.F)*0'e&/6(R\CmY=9!nZNP7e)Tp3e>/c_"do\k^$FC!nAh/V[Ga;p&'"[j#0Y@7EXBqX4o\q_0H
%m9\Sqoh!eEe4V(6,3X$-"KH.]IP<;?-i2J!+FEOjF_/Npm?PPlX&9W$%^Vk1312O2k),i1m^?Q8-aR+<loErW>4mM[e@dnkAAusb
%9ap,UK]:FOXVsWFrd8cqTt.M6[g%VmJ:<(F[e4EW[]3V7.bijqs%$b)?T.epC80Uq.hS>i?SrFQ];"Vt*2U7nYW2,K[Fsf$n$A)h
%bN0R:#npIV6r>u(04?'jQgc\+moiK&jW71`C!o:06kgiIFc!e*FgZ2[eL7,Nl=4D^VO>^o;$^3&?]))k.#L0Y,4\%q8/&7pTSWNQ
%.et?cS4UG"+(>`s2r@Pb$QABj!/)?]m4kYKhB"458!PpK5nR&fp@\ZYe/X.\(D-$.L&;:tLgA,';fAl/LC1.rdn1tGT6&3ahma3N
%Y9:UNVg*@&!E&9hDO+/97!K5A`9Wl>3hBS$3['edQii':U(o@gfrH=^+F.23q*et>e0HK\`nAac=]?./EH84%?F/E8eW1m;>4k!:
%?4fI>d/+Ftf!am;p"ScLGSTJ<j/?W=NRn<RY`E2,p)sF8?f8M(StpRinQiZBFQi7&+X@VN8a,\P+_:4rL0+6_5R](AkqM>+$=Y/^
%gIGg2mG?GD-N(ff5k8hF$sUt>g2/2=&8GAOeptr$["qsd$4,JPJaAG;Td%o/.Ahc0ib$SO0StHpaY?#dC45hadAG>i"`2NP`DGCs
%L)-*Ef#'Pj7h4^ALn[Vnp0=\L3;\]/#_*Fb\>gen#U?bcQmga!=c^gBb<.sZc:9C9?aX%&Z9sjAOg9US?p\,,'os]?C#?6/0ikm7
%"tWJ(G`3@RD;`hfs/FU1`d412Q'#_6aaGkYNN_]_Ucu$YMK6nDi!C2Z%[E88P>*a5:6nK2rr7cH3emsCddZPT+Xo6hp@P^/Q"L0P
%YH=eL]!;k;CL_,lFY$Hc-ip<$]>"DNe5@G>TnJe1iG,>a:5KF3m@o4*3h)mDUEd?8X<,![.()e5C#^d59G/u<%6HtWD8IKYVX'Mp
%W>bT3R<FO@9r'1t=0Q,-nu27t++c'f/d`FnYdKKU!TT)^'+)[6a2:t]?f!E#5^e)bV"n>VrE%?#)Ys%iFLSD]5#35nd&K+MkfTRs
%W`)GgCHIe]$q_8FoT5u^5U"+.9B8.&0ngg9JP-meS!3d[q!!^>%Sb1#^"Z@oe\E]g:cl:uK:o?0IegG5K>r5B5dH9p^'Wf-\8dsU
%'Q,CYF'(H:$n$:X.Ua__/L,J!ensTK5q6Aqpj[.;3`'8.PZ3YeAeZ[s7<CLdZ79Hf*Wfhtl#8@,E(!%5<a0GQ96u7h_`d*$c=S&F
%\nj>#@N9j.OISuAdp%SH?I&Ls%`p_":]%f5*'>:.F'#?iRb>o4s$i]G]msJ;Tnq?P?SZ2'\8:+f73'up]s<=s!.K&DT;'<$RI087
%h"H]L%)+sA@[Km]AF3p0X"JD3"VpQCWBjM%Sm'p!6Q02orjVo5BlHF#hc+72?l*,[jEuSgL:m#%+Qj^:6hg&!)oVP1,OaM5NiiC9
%]M<[?VeNAfN6[%&3_j-]7j#XQTYepf,gU%rEdWSjV.U7>9'KIdkGLm9h#g-Ve'lN:f?[/R+%Wl%6P7aj[C;>'9k_-N`gdVl`77`0
%<,L-DgFCu<9++5Dm?Bko42>X4NH6aEPVs'@)oE&(2STjOAKJ=Q>5Ier/L,1n^_'rpCAAWfJh#\5GX9o."ta=$mkbCpa67.f>\#:a
%U?cE_EtVb;,drt!;kh)=p@n:T[,*>UA`02=gaF=IWi?S8Gc?ac/%NYb25<VjQ-$$Y?.j:d3cB`u*dote73$VG]EG9$*)FMHVo5@:
%)*Hmi]W'piM5U1R<2%?T_L<U<@>P5H<[oBb:es/j?W>sBlju#9qH0n\+HaOVm1Ej=3[-;q9sOk+*C2o*o_&P"dmDku']OYuNaq.A
%h;rMhXUH_MX3G.jc#SlG,LSJq-g9mWY=3H^kuXG5<QmU/MWa71.0W1^f%&tYN:9V4?ske4l.qQps654oLSu,]p]UBL>8dts$=T=,
%k^OaQLfm+*d/QG,0Hk?e%jC@qarhI$Oq!aD%$.='=GVKA7;C=))X!UE-f`;kmRn7gKH<`(P,j2__ZBctDcd3>"#6);D+@^;Fi8[@
%',)1C>:q$4Dp>L_`5T^KM"OcO"O!%]E!`Ni$RL0H(mg/HH+]AHZDLDU]c[Go%YWha"`Y551n,UF;kd,s1"s>J[C0?o\MuVQN!Ai_
%a?B@Op6D$p,NbSF%%P+W1MY>0!)M"X$)4G\=>[]%hup=9qCe:$/8uep$&RB+47)oSnE`hFllCZrJeqE5>nU6WUmQ,.@e_ATN#^.E
%M?se"!Q37;+N9!=J:JA.6jht0n@h0[Zs^=]X0Xm'Ss8uYU2"AI5Xj?pLrsn!e1h7r^h,lgDDfY%k'$t17V,b1!/aY#'2/a$""<1#
%ifUG-\0RIV@m"=5/<W\a0pD`LP@RRMKmYfK8hqj8''(O/0hJ[$9,1L3di$H$2:Rm9)8tWj(%ct,aUQT03.\sUE[C(6^^6TUr@rJ)
%jEaPU&,e5+_Dpk'8k.R9QF_V\:[cHF%^#'KGu4msPRoPF+Xjk=iJ+"+Xh1Ah]@aqZGOK<ZqI6;MKtA`l5t.iU0>T?N)m2YhJ0Q@I
%JD]t@"E>qb/p8@T0R_G#9n@h*#R)!=4j)Q',F<!<Ur)978U[j0^`q\Dj/>8!hj\UbA-tW<''/br=RY_<;L@h+``Ns=XhP]'egh*,
%A*D;@ZZBoUo,gAL06QV6)-"XKn>7#\)mH[%"[m3SDUY&hfk`$"7-']da<b.c(n2$Znn4Ykmq<4r/c<(#o'+`bl^GC45-'>:aj08o
%EF6rTK/aaho'jG!^$ASsJ:Sh3!Tm-(`*IUA&TY,7[4FJgQkfTmPVDm?Y43kU$UU`VdV"4FQXe>(8m;1Gs+UiHibqumDk3tK1p,ih
%59+s8iXZ4c%o;k6nHVGW""9H,-<X:s(%QP5N430;WIMFd0>nqhFEQ@VmE(eljaB5*L_k]I)(\FT[;D(c)^:=UU>S&ED*4b%,],*o
%\\N[?0R:F\d7=qJRVZg)R&+Q558X+\0'sJ#pB/[!1"2=i>!tI[HV6@KZU'A8jUtHk6>%s4dT?*Kmc$;!,"dn>9I]$WPlF;3+WY0q
%&7_&(m`5O5QI'Ph`fg4GT[F&2,FtUX"b.0$ZlIJtLh@122ru@V'2:kES6\4pLWd'sgMICb'LN]oH'*362bkadF)hZDSk9aq$qAmP
%nipC6r1NC<@Q%jAE>I;63:>rKL"#V"aDUi+h0W9/oARebl"U,m33B0]IO*e\$H.MscK@"U-S/t,ImVG+]5*>O'JiACaPFULh_hR6
%?GG+7eQlBR6s;]r!m4$jV0coB5hJB@cGDrB1HTBMH--9Vl*865k+J3=]Z&=KD5o7a?aYEnDJ+fN&lK!!J%=*",,8PNeotj+"pJFN
%-#GIL?X#p51%tcQ5/)d@LF'WLKukE%SDsc`)MnDmM(Mo-6oA#?H$"V&a9g<D`:?lV+dZ<a\^4G25O-UE;%n<:&<Sqr$[5r!(=B/W
%-"KeBMq$Af>I?$(j'rDp*jLWS]L[3gRV@AU:-j*L<`$J3UT96VH.f_W"2k-T1eY%9'ISd(j\-AshX<((emE<tD]U7`c-.O6.EjF_
%`qI<hj5S8DjnHsuH>>X7^Y`B^]M4V;$M30?91q^OEI%P.EB0.k42qs2290kF',=P$jdU"=N@Vbdg]"cAGM9RTpF9Hknu_Uj11-D7
%04-J=\Lf2XC\rQ9pZi$!k[/&Gm!It9?=htak4M`<.O(nTVhX]?#hjLkpWNAr`CFjedP!qu2$s#-[QC+.>$J/3pofrl]=amj547/i
%RP-o"Fg1!%^+[dVc^b_@Y@R4G]XXQa#+8BOE"VQMa.1-)AF@K8'A23q9r@KZ?Z:bCps3b35AtDS`2AZZl'o:W1B4TS1RUDXI'dOt
%'$2faC.4jXLcooL^2LM9aX?Luo):!OXYY$F:7p,bc)>V4'_cPP1VlFLc6V3IKMpFCU".)F"du9^$?%n%ni2<JQ2C_(Y#:\fTn^J+
%^IaVLFLY9PU=.GS;l>T3.]$iWKebJ)1\Cgo,B\)fCN=,t%C]^.JR`)eFWG$qQ@2%#)F@6m5j"KRTcs&-%g$X%3'QNQl2_;,UP@,o
%4lDJ]*Y"g@HGG_Jj3\EaWX"FH&;,_a;a$3Ka)Pbu4k0Yam"62X)jQ(0d-?fmX3\pI`._B7Vs<^nFt\%Y?SC856`D09[WY<!l]8%-
%cGJl;6Mg+]UK2V\gC$_]q`_XLGlYJHa6q:L[[TD&.[g"Sn(J:WLjSs=FjW$MrT;;C[)c9tjWR*1L>5Nr;B8?IOkb]9^<p>5A!+5-
%[CLu>KI;646r:1&C^o^#B]Qj8B)Xt/S_W*]V0H'tXi3FUe)DJI!s04o.aOJ/G9RG?ELA_^PWU[t6'r;PKrGQI-)!B$BL*#!kPEB5
%+U)75'ogIW/^)u$9SGcg!K`^-e9WTQg;"X)j8EZC:N#>KR:'fI.@nAJ:VI&uX*#UUj?)^c`[Y<Xcjh7sXV/@@e_?Q`%d\hM2\PG,
%0BuOt)#qZ%Q2n[kb`@!T>Z!g6KU.!Y]o#!3])&We/^81Zhs2(W%ulpB\]9X9#pG^ijnpU[m)_FM;uW@72&;jq?^"CrP7?Bhq/f[[
%$O,5hl+gEVD&J4hMb6+sR9@MGjb92HG*D96]S3g]:'RWpGilBHQbq#D"+8>8jV&hSM;KRtJoK:aqBtPP8[9>ho'H;j)?`X#09b83
%^O;r.S%[Q_;jNJn(N<"8-Z^V3>EJejRG(Eu'[BEr&cQ0OKMV/oFK0Y+-PqN-0C`p2DuCFu\bcm*iSD:H^T^S]f2pAlpk%l!"^]Pj
%=t\NHo!*]]fRIVPC@3+(V';\3c6g$i3`(q*G)LC:JpK,=O0-<^\dmlq-<UTO_nN\f^lGu3\&B`/#W7O<ZdEo_.OS$e3nOVH%`m&"
%>R)Hr5$<PRl1TZ]63]70KBnU8lbGt9lbHhb\dgk=@IB*sJbPsF"B9:+f7ReB%NfMAC2)^fmI,c$MHGQ*U%[UB2I?S27_1J[O8.*f
%2d=Igd:5O4pQ=S57B)k!cktI!I:.Vo&XZ,9>Br!!S.*ogZQCuSa7J>J>a83tO]E.]ifGkY-kkjt=s$Gb/^UO//0$\*f#mOr]K5;-
%aL%Z;5[S1sT(A!R3VsA@cT-I#e,AtPh1>Tl),]%Zp5k8EU=Zi(@Cd5LPKeO0LWW"d#MV^3oLer2;gfmgjYb_HF`:t-eNT#+I^W:5
%M#\TI3-IbO,=Jkq=pZ%Cn'<*_87NaF?Wuh#hM:tcF7<X%/+$LJcY:sJn[G2CRemhn$R]]<cBlbQ47/eg;-Yk`R,Ca*GATT^N8>ko
%[OM\!hQ<nq41nDp41FikVSF/5a0Y5kZmTXC_9Zt;VmZ,SqFD96],dZu:@%Z@\#W`q-VV0P$ARc;D80f>jhOC?3'3T*Hu"/K`7]8k
%gQMs6Om^0nlf6)(Chn`l^gYM9^&1E6s#`NDICu$0,Q4;I4*U!X#p<]74%9Q.H"2[Qc_,9JMEBIXpa7iR(jE3HcDE,K(jE3H%24a\
%An)</EgJ8I4eunoS\n=?p"dj>-En^fbc8addY'X9A@O3L$PXP)?<tF5gGIOrS(j`;WXF2+IjL[RbQ)$GO*'6uc1=*%6Jb_l_UcSp
%G+G&Y35=a?4HTo->NUT40kX+&Jk16n4Cjf=\H;-=&nq=%-j]fiU4EkgLM0u](u2*t6aA']nL%!-ACD$WZhIS6FIrRaNmGi%hkr)O
%]$p@qhU0'Ck7DPUr1EkPqM3)X,kLT^rcWrnd8dO2m_2CQF+3tAj=50V*R$Rs&ok8B*_D6EMPg^nnShbEFbGmO^Z!NN5FI(!KJgGh
%D'R_oi+R3%jMtT?OY*FH(RqHiPdEb`X.&2koh*P&a>3*;4mU-EmN;rdJfO;?LN(;MYMKYL9[n9QR@eg58>^;`c1hCqkZL4&fCH;5
%-s/"sE;"`7nTVP&Q)WLF9TT@rK_U?%iMcH+]YYpS'#[p=MD5^X!D/TR6B!^Ka96+OSu8a(_q25!)H.%M0jT%Y/j]RM=W<#@[2'4;
%PImA8MO[ou@R+[B9OJI+"I]d@%(=`0i^:+#B<UKDk9L$oo%[P+eqd^XN$o`++"l&V,*8^Qo^25:SKO,^SE#=Hl^N[Tl+\l;cl*Si
%599a@Im&:u0T-UAj1m;X;EJNJIo<*8KTVkiTTAEK0`U^p\2f&NH$hT"q=d:6curJPgImN_dKFE8%'=.i;S\KF%*da,BbJKL7S]!X
%s6(-fps8BC')t)S&*q<\2?$"SJNs)PIp7Z"IKStE'8A]U3cT,;:L#0(M;>;P5JF67/]XK&>g5/iDZ\EYdl'&31E8^H-oBC22;^+o
%OZt@0GMW3`ZR]Qp$X%9(5JJRfc'e?.6LQd\=1>l_O('qTr,4QDX7*$:l^Ol7><53t13A:/,b\u.<;<?`M#p/J0li9BPPf`QJ%>2j
%EVWt#nEoW5jkkYt:)*3Nq1lGKe%;*uf:.P2(';OrjOGTulb5pfj%cDu'>$>BdIlFl)fAO%9pK!Z)4k&BCts3IT"liqSmuhX*(TB$
%=*#D2$>m&!q";YPYG#0hTbhR2@6kia@s@hjgV2g<Q4`&BdtZf5)*c0WVIb%h2<M7h34?lQYn2'c`utIC&B@g&*"Ol:ENgTV)9Ndm
%&;J2FD-2,mKc::T=E%>C#oubp>mkh770r2IGG-)9n%TM85eit/Cr5Mu_`W]]\Z*5\c[]qbAI%:tiL!fRBG^KB'Mb$(JrZUA[T,.9
%quNFpMPtK-QL5Q3)u#K_'T4=9i7WkD\J)UH3#m<s5Rps%N9+94n*3+4#'$)?)#+1t%YeJ-B$iO_SM^$tgON(#YJu-R=^+Y]F)ZMO
%d&!hUK[$5qoSLQlo5\4OaLR$)_b&NFoKd(sgR@I(k(Mo2Se%sk'j;1RZ&8I;AAA7-n/J9gQCd7'Y0j"UTMO.%dl?AW&RL]Wr#30*
%+d['Y(>Qa*33HiOS34jaD$0Sl/C/F[>6.$"cl#r_Am.qAHZi];(+0,eY&:b>/^r=%2+*Hs;b&WLe*GO`m?G"h,dHpCB3QG9gN#uX
%JF5J&!Up>"0:I"O&9`VCh_`Dj>mog`-Xae@i!(`a7.OWA%*!#NSkW/H_?i+AI)-4YO@`CGW]@;SHSc3(b*m?S$n&h?Jee?Ub(G[f
%nMOl7&@"]%EWcb`q64n0I*Ztn;)ESV<I<h%3GmiZ03G\@X6=jqepYe#%',;/7LlXDh,NcAYg-o:DLObS="AU5eMdmRbr1Gf`WTT/
%XB/o.?SMjZMJrMfL+RXGSe[cLj_GWZW4QZXl%*"0C97+[Vp'slT*!J\240ekFttV/6'O?#KWbq<#oD/>N*Gr5,mubJlta<ErUt%I
%ka=Bl`0&@IISYj04]+Vh9g;:@jFcMO4X&R.*RlD1Q'4d<:Xd"OgT.=-.;R$rnJq`KV#jIVfJbdjH\H(!nBpdERl4NU>i72+3]?\*
%=<QMcfi[X/\)k!lc@QKeehIVCWt9(9?6u'0?1WH[)JH:>l'RW/)?WbnaS)3b"$Q7qS/B-[!FDm@S"Mp[#DgJd:4b&$s2Xjl]P%`g
%1/!^#;d8iu^K4(9:YLn-7Qpg(CIdEjOd!X4adEGd4(G0i>I@\T32OQ;!^<%R8.ib&dTt(Ie(#?.B`%$&7c4-6>uPs$g+J3t#T(g/
%_L)[$_HG3nJW<l;:?.qRhi[%FRLb\f+tN#a,=L&U*T%>elj2i.g=Op1QJkS7"!'_D(T@588k$>W"V'N?1(B-I7hgpf*S/Zg5tD:9
%K2^(c3Da%),$./g>;Q5PV04.5Cd@Qa+Bl;T-Bt+;8oRUMa8m044=Bn:brG%%UX8YuM16;O/N8hep,hd\0&="0^Dth?7O?q:RQ3o!
%p2T"I3"SO.JS[0`@!t2!g;MD\A-?Ga[bu,ZC*OSI7I*Kd_[1.\F8E]r1cW93^)YN0&:@FNj]J$l:;:q)+k_[V/@u55/$NrHQN)Hf
%MKNhR$[/QQRgL(MkCs=i5q@Q0N4P,TC')IqS<n$$YS2`\bm;CPAUs/_W/YoD`,D+2L(i3Aj=*PKibA*_QY5+gM*c%%YrI:s`>Fbt
%(sB4Sd(BG7Ab<1o?ab(4qZ[`UfO,@]fNZ']eRM?@j+IOG%F&E%U$p[5O)p?e,9T'Ue*+$OZB8#6$kRuq)aRk!Of'&@LDfD19S.KK
%S"Op!76),2i)?-hfnaZ"H3m:q-t5ZsF8hnFleX9?8nqJ2<n)QWSV"$_Zf5BoXeMV6<15I&-h:D0]8PlK$.Fp/9^$tbgXgu@(E+(V
%5MZbYb@lH85tD]4,<.6Lh*prP=JTB?SDbb4+0Qb<&ZF?n=gS7JEgf%jmt"#NMh,:sm4P-J^_2Y)[F"pjdiY]W@G7.\$:/')60n`1
%+=DQF\`Mk1GSenCE)2HC.eQ$L3FB1f7E-c;kDC1X@tk(mAX=9qS7Z85_4/6tFj!)$X9^$#64.oPElpC+joCHKTG]Ga>F*\N-h-*9
%F+O\kW<['<p>dq-KH-(Pc7,BM0A2<17e@C`?;+tc?asq0`,6Mdp7A!?eV/WdP&Itu3)l%H)G!dG<(PooTE>9R"P<4W$0gbe"T5XE
%-b\a.C*Tr0>`^V5(]HK8M*/^i4tqa8>1!`U_=c`g9-5o6OJ`p[Z4USKFq^<E4;Qd\ZW;*RNV:3*%H\P<VB0_7E6kS\JV!'Qn:LtL
%`C:#-LGA0?r#f85S:\(e0uKtm<1A0%N?NSpP9A62aA\U^iG\loVsMEX)5>D,7q36\:,9eX8]H$WiT\<t*<(AeVoZ6-^AYS9C_(&(
%qV)EWo6f<UGm''37fjpTkhWIKoTC(Q%G]$L$)\=n#oKua]LAY7-CS=U9m.g2CddF/@73)J\o1=l?.lG@9Lg+c;9l0,LbU6F$0FZX
%iAnnoCAt>Npal\ENiC8lDKQaQf4MQ97J*.\[\.aW)T_3<a%5!AVPLh[hVpCla3O#:kW2@u;j8:V7m"Md+EdfS#PJ4Y#qCulia#NU
%E>l?:MW*/(^YV9%_.7Xn(;Ub*JC/sr_iVj3(ZLnrmim&tMj=31fRAhMHPL)G1dTSDg-NFVYnJ6`RKLk=(`1-&W'872AcF4)?O+hC
%*AI;8Un$$;;q"5TlVH[6qL<B6F$R6*<s!TmDe46\<\us,`?<g;SLi5K<"OYS"X<U:@278?eRKs0l;7RF;8[VPg2$U77\b_$R%AaS
%qeZ>Q5&34en781+nPA`Kl)IrG8J)?7.VU-33Y4iZ035\k9]0KA_!41pK"b?Hh>e&LF]Qh:V.+++gCT012HJ`dZ>gGj+r`&R&_T,L
%*U2G'C?&/f)s0CNPK;kQ_D[(0$sh57!;PMj(i4i(^.,K=CtglN>7T1SgN$fGikpsnGaaWWK*":LZk-?U_Yi@:3l;YBK4SNT^=BQp
%g+dLb(U?>GWh9n+/VmI>r$]nr_,$,hC9P9am+;Mb%Le)b:-en3W)MX,#'C8M9pJJ=)8qDLOPEGBK"A&u^k0-H34;-/'N%TT?H$Gb
%__tVa547)R#_A1kE!6Wu.uLp7+r`(,@+UC09`prlVK!au/C;1<fCr8RJtN;+$Fjn?TIS"eb@LE84dlS$jf([g,9&0F)5cZ0$3EMT
%6=9sia0;0("cs2'7nE2CYJt=l4O5<cA:k0rBGeGb27Q_E6*PrtSp]G&!ltR=V\p44gF=5%[di;p/6A_^9gp-p@M#O>n!cYV<*Y(;
%nded)`ds_,j1'%;Jl`7E&>UFN5qo+m)?`8fR];paQ>tq'"Lea95^=j\W.M=P'%`eXBlrB#a/j.E\-C'\Jj*#n&P/?ljrkE)Q$N"8
%*9^O&@:R/3=MCQHT,e)f+@nf*!\=?8VO!q8)D!l@]'^>\2,u_L/Rq+*J0`K`>Ku'gPjh:kco8\g^p8Sde6Th5A$oOl1i?iVAJ6Us
%;&tRY6>-PG<Y/UXfjHgrq"!43NKns<e$uXlQ>':UXpRIV`#rC&1/V=Hs-eOVYY7^upNj:XFNiGCYmlgB'sSg-cfoUW+Ai.tW$Wc[
%2FRB\5)2$uL9EUgm!MQ:$2*eN@)KTKDS@qiPh^YR3.)LhlB'9;]l)S>=+VW;o+`HDWE4CT8b^AX1,iS!9/NE&o54UCM^^UI03YMs
%h:k?>`b,F?6SEcK=n^9KP,\5.;qZuO7<ZQT1)40CGRhFNL1f14b=8Ag$\i1:jB)&K:+)@'QN->&'YPN3P.d568W?e!99SJgamoje
%FgA*2S1Ntq:6oPFbK7'>G]g;;H![$mc`gIub8QMbME]PS`1)&C^O<(*p4\Z$cNl'&?M;WAj<Xm`O'ZiU)Y&*/DE'rEd0gl=J/@&2
%'RAs0OEpJM+k[.sQ$oU[M)QO;J,<+Ip&tmIJ]NMNiYU/+I5jNc\/-_S!FO8co"KKP-LZ0Of82;9j%jV5OW/1hG-=!3>Enc.$OfM2
%BR=J$^8/mCIJKs<hs]j6'43*+TAVSAM0/BE_.Q?]g:%Jh/)#;Hc+KB"RC+]?Q!*uirH6,A7.DXlN`[eF*cZ;V%j^LG3dI]J+QHcO
%b(P3)ELF&gh.L@/8J$B1o/NBIQ4%WU^e@QNBjMETY.NeIY(\<t4<%W'?'M.1YioKZ>d]uPl5s%;i#N,UOu0?R=fT+#M.a`L!L9I+
%_3Sm`B#Au\RU9;(e_dlUUVdO/[n7"@Us\7Ic5f]@QQB7s5qaQ7)Y(5nSVZ07#/-]"e9B:J:QCd5?("")fo^+g]:tY]SDpfsrfWP(
%&S`H_XA"p]BIq,.CjqrYYBZ@EY.QkgU7!uXU*iMEg%#K0jgZg(Yrm8B5aa5Xfb1CikId_^r*m,0rkdcT&SrT%<taU0,0Oj?N:I*r
%3?9DA?Hu_2'.Y;ROqa<3Y7OiW]@%EeJ6,4)H1I+Od7UXgHg7&.bbjLZ\Us>P%4ol*8W6_BhR?=(oVi;;;t'rb-LZj_Ab(:ODt09q
%A*5^%TRhe>-*ue=o(FXGh9hf38A&#[12gNF>itEtpDKlSqkk9k*GAj6"B+We)>df<$Of,C\JI([@p_@"B'aa73#3J/O0BWdciDl;
%T'lg2oe@OY2sk"a^-\(KqT@hR?,+"tES/onN:T>d#3I"$r\sjbo"Xu*PQ.c4P5bb+CU=0)@BYqj$A66f<H=lUhq'DX&);=NBRtt"
%IoljmFS4;^!,)p$I!;d-`fFRcC3U4Fk]a>i#%6f([NhTd>@Yb2#<UN1]YJ(uOu<BBnRq;P-;1I<?^@@E_!:-On6N-,=N&Jn!"C2j
%KM,GP]$I*8<l<ZTE!/X<2?$U85$#,Sl"1dH+e#G#%FI':hiNg4pkET)KQ"rO$@G3!%`109"bbTS'_mD;qYC!VJo?H66%'aG;SM/s
%El'DCNoS6Wf?qqaNXjeFelW)Y#[.LqiP;V#>q?>VTJsY_d@?q<m+FAF0l%^EHGfGY,+aCm&@<Q*"*e8=JJ,Y)K5'E!=?/1KBqSPY
%1j8MG3X5kr:oBsO1'h7$@B/N#FUCu?eP>37@RY2p\jrNI$I1ubJrgBG%L>YV:s^/A6/K''X/Xf'D]0^D6gSq!Bd(ej!0eXN[)?n(
%*?ErmcmrlM(Oe_h*/V$6Zlgbalt?R;+ne9aVL`(Leqk?\+m0te(4m6PA;Dh>i\q!Q]c*sMnk$cYh[k-?KiprU&<e9G[>NiQqmpEM
%[:dlH4p6Z$n3gsoB-E*t:kn!i$qR<>3#ia8r"r]u;olsnc_>Da#S,A*?-i6ZY_=2'@2UuE%]AOc.Y>S3boj#2e5Y[s[u;9BJ_V"M
%gJNM;JeeE!+CAI&$R.Ql1V2Ok1fc^#D.?(Ti0u#!7k2eN&qfBJggKL"&d]k'>UP1X#WE7cbT"TXi"4XLJh7*S#g3d+>=!4aXkfbO
%dOB)P'7rRm!J+/\UsN;&NNFhGf\4"W/,b?(&2T&.m.fKYkTL5K1?9TT0HBWpoOo57"4^Ra`c-aiY!O]c0o4!a]3<0mLgAiCEM-t$
%3/HRM[&eoqdH)$.U4VB$/P1u^Lihd,NoG#"bQG;d!&?h`1.2.l0Yo#2TErsS;8<KW@Y%[WW&Cu]1IgV$:aA"d+];9jdM"tg-j*(\
%K#3jf-@"]:KkD6$!n(GeFFj'hgTr`WEX`bt+DD71@!h[U;&%pkWE2[pKC-K*5X_)TjJjU6p7&uQ:]^kBLo36[5oOGM\01R.N>SS!
%S'Z7d8L4-?(9-Joi7J3U^'&YQcBfXeeG4.[Ji[8maAjAp@_Nhl^uifO#O6[C+@2PO7kL\2AW?J475pq)`1-Dj(Tc2si"lVt#,c.8
%#R3k1kQ@&3E3]n':QTH&$"?0)k$]hBfuVQ+Lmq!qS01*+K#RfsU)T+gOR<\e@Lrsi7Z:p39k[l'VWReNb8,X/_64iK.pp7p@-7`C
%_%^.-Ue+76Hra]+])(a2R9K20\;a&4`rf%nT.?iI4HDn^<fdoV-;bNK=c'0BlE:k.MTh^NoqNg2^_C5`"V;hk&kjI@Q!fKPr]4Q1
%DYXr>8$!GsE*B;2_,9-9[IHYc5R<&lE>6RU&kC@*B4hY+.=[<J3"R3m$P1p&&BGuN%"I1pn?F=.9,sZK4b*m&_/VRWbuL7ljeo8X
%oY_%CP!L6Hr.43k@he!S$Bd^G-(;sOn?0?7(mbR&G:q_8-kI=0!p"ejM/A>2$;7T81uMR>[NJjX'&-f(>M$-F7NT2ANccOpQe2L.
%j/<+.$cahin$'_gE-=VgcE?@W4K!F_\%cIM@RPcTpI.`L$LUn,K,u.r^<+N"&9reK,q:;IS?M8UVV97h8V45u8J*?TKuU>%8l#kf
%TF<5G$jp@SR:)T['Ui@Pk29UUGVLC-*7q'1QW3m76=d"sGS-Tl>7*,O#!iq'"3OroDO7Ij@/HP`.6U7[`%NN,L,tDZ0joSgSqJaF
%Cl)bUFjX-4L,#0cJ*.0YLB'VWJE2\?W![(,?^Sm=&V;?,(#i)IWp&_"?8H`j]Z,X*5lmeAG>ABATI_h>Kj4s/66SrdL%;_V<-7jP
%Vg80;(lfU;Jtn\o9LaS2+HHYPU4=Bi9ncK$LK,`k=-$jrOoG^AYp2O'BOScS$DTj8#3.]E*/$YC0FIW_6rA(!3#2VnO0Cbqp;7^q
%_0eX5`ZMk?_AjtBHGiH'rZLoE1e>e38c\91,lX4#?ZM0r%i:ecIp]qNo0A\s35*'(rc3=+GPREskPFlDs'/<h5!1sAS\AAn_4N'W
%?S5\oDO2$?^E3E/'RWG60K%Bc#HdCn!LL_LrV~>
%AI9_PrivateDataEnd
